<!--(c) Copyright 2013 Grameen Foundation USA. All rights reserved-->
<apex:page sidebar="false" standardController="PerformanceTarget__c"
    tabStyle="PerformanceTargetManager__tab"
    extensions="CreateIndicatorTargetController" id="page">

    <!-- TITLES -->
    <apex:sectionHeader title="{!$Label.INDICATOR_TARGET_TITLE}"
        subtitle="{!$Label.INDICATOR_TARGET_UPDATE_TARGET_TITLE}" rendered="{!isEditing}"/>
    <apex:sectionHeader title="{!$Label.INDICATOR_TARGET_TITLE}"
        subtitle="{!$Label.INDICATOR_TARGET_NEW_TARGET_TITLE}" rendered="{!NOT(isEditing)}"/>

    <!-- COMPONENTS -->
    <c:blockOverlay label="{!$Label.LOADING}..."/>
    <c:lookupPopup />

    <script type="text/javascript" src="/jslibrary/1331837151000/sfdc/main.js"/>
    <script src="/soap/ajax/25.0/connection.js" type="text/javascript"/>
    <apex:includeScript value="{!URLFOR($Resource.js, 'utils.js')}"/>

    <!-- CSS -->
    <style type="text/css">
         .save_popup {
            background-color: #F8F8F8;
            border-width: 2px;
            border-style: solid;
            z-index: 99999999;
            left: 32%;
            padding: 10px;
            position: absolute;
            display: none;
            width: 449px;
            top: 50%;
            height: auto;
        }

        .popup_button {
            float:right;
        }
        .period {
            display: inherit;
            margin-left: 5px;
            font-style: italic;
            font-weight: normal;
        }

        .bold {
            font-weight: bold;
        }

        .general_inputs {
            width: 300px;
            border-left: 3px solid #c00;
        }



        .time_container {
            margin-left:18%;
        }

    </style>
    <!-- HTML -->
    <apex:pageMessages id="messages" escape="false" />

    <apex:form id="form">
        <apex:pageBlock id="targetData" mode="edit">
            <!-- Hidden input to bind performance end date to the controller -->
                <apex:inputText id="endDate" styleClass="hidden" label=""
                    value="{!PerformanceTarget__c.EndDate__c}" required="true" rendered="false"/>
            <!-- BUTTONS -->
            <div class="buttons">
                <apex:commandButton id="btnSaveTop" value="{!$Label.SAVE}" onclick="return runSaveProcess()"/>
                <input id="btnCancelTop" class="btn" type="button" value="{!$Label.CANCEL}"
                        onclick="redirect('{!$Page.PerformanceIndicatorManager}')"/>
            </div>

            <!-- GENERAL -->
            <apex:pageBlockSection columns="1" title="{!$Label.GENERAL}" collapsible="false" id="general">
                <apex:inputText id="name" styleClass="general_inputs" onchange="validateRequiredInput(this)"
                        label="{!$Label.INDICATOR_TARGET_NAME}"
                        value="{!performanceTarget.Name}" required="true">

                </apex:inputText>
                <div id="objSelect">
                    <apex:outputText label="{!$Label.INDICATOR_OBJ_SELECT}" />
                    <c:TrackedObjectSelect contactLookupPath="{!PerformanceTarget.TrackedSObjectContactLookupFieldName__c}" 
                                trackedObject="{!performanceTarget.TrackedSObjectApiName__c}"
                                isEditing="{!isEditing}" />
                </div>
                <apex:selectRadio label="" styleClass="time_container" disabled="{!isEditing}"
                        layout="pageDirection" value="{!performanceTarget.Timeframe__c}">
                    <apex:selectOption id="week" itemValue="{!performanceWeekly}"
                            itemLabel="{!$Label.PERFORMANCE_TARGET_WEEKLY_PERIOD}"/>
                    <apex:selectOption id="month" itemValue="{!performanceMonthly}"
                            itemLabel="{!$Label.PERFORMANCE_TARGET_MONTHLY_PERIOD}"/>
                </apex:selectRadio>

            </apex:pageBlockSection>

            <!-- TARGET -->
            <apex:pageBlockSection columns="1" title="{!$Label.INDICATOR_TARGET_SECTION}"
                    collapsible="false" id="time_target" />
            <div id="component_container" class="pbSubsection">
                <c:PerformanceTargetValuesComponent currentTarget="{!performanceTarget}"
                        hasIndividualTargets="{!hasIndividualTargets}"
                        individualTargets="{!assignedTargetWrappers}"
                        displayFieldList="{!fieldList}"
                        isTargetUpdated="{!isEditing}"
                />
            </div>

            <!-- BUTTONS -->
            <div class="buttons">
                <apex:commandButton id="btnSaveBottom" value="{!$Label.SAVE}" onclick="return runSaveProcess()"/>
                <input id="btnCancelBottom" class="btn" type="button" value="{!$Label.CANCEL}"
                        onclick="redirect('{!$Page.PerformanceIndicatorManager}')"/>
            </div>
        </apex:pageBlock>

        <!-- SAVE POPUP -->
        <div class="save_popup">
            <p id="popup_message"></p>
            <br/><br/><br/>
            <apex:commandButton id="save_apply" styleClass="popup_button"
                    value="{!$Label.SAVE_AND_APPLY}" onclick="savePerformanceTarget();" oncomplete="return false;"/>
            <apex:commandButton id="back_edit" styleClass="popup_button"
                    value="{!$Label.BACK_AND_EDIT}" onclick="$('.save_popup').hide(); return false;"/>
        </div>
        <apex:actionFunction name="savePerformanceTarget" action="{!save}" rerender="messages"/>
    </apex:form>

    <!-- SCRIPTS -->
    <script type="text/javascript">

        // Boolean variable true if is editing
        var isEditing = {!isEditing};

        /**
         * Function to validate empty inputs
         *
         * @param input to validate
         */
        function validateRequiredInput(input) {
            removeErrors(input);
            if($(input).val() == '') {
                addErrorTo(input, '{!JSENCODE($Label.PERFORMANCE_TARGET_ERROR_MESSAGE)}');
            }
        }

        /**
         * Function to validate all inputs of the page
         *
         * @param inputs array to validate
         */
        function validateInputs(inputs) {
            
            for (var i = 0; i < inputs.length ; i++) {
                validateRequiredInput($(inputs[i]));
            }
        }

        /**
         * Add current period to the radio buttons
         */
        function addCurrentPeriodToOptions() {
            // Add current period to weekly option
            $('.time_container').find('input').each(function() {
                if($(this).val() == '{!performanceMonthly}') {
                    // Add bold class
                    $(this).parent().find('label').addClass('bold');
                    // Add current period to the label
                    $(this).parent().find('label')
                            .append('<p class="period">{!JSENCODE(monthlyPeriod)}</p>');
                } else if($(this).val() == '{!performanceWeekly}') {
                    // Select as default
                    
                    if (!{!isEditing}){
                        $(this).attr('checked','checked');
                    }
                    // Add bold class
                    $(this).parent().find('label').addClass('bold');
                    // Add current period to the label
                    $(this).parent().find('label')
                            .append('<p class="period">{!JSENCODE(weeklyPeriod)}</p>');
                }
            });
        }

        /**
         * Run the save process of the page
         */
        function runSaveProcess() {
            if (!pageHaveErrors()) {
                showSavePopUp();
            }
            return false;
        }

        /**
         * Check if there are any errors in the page
         */
        function pageHaveErrors() {
            validateInputs(getInputsToValidate());
            validateTargetInputs();

            return $('.errorMsg').attr('class') != undefined;
        }

        /**
         * Get all the inputs on the page that need validation
         *
         * @return - An array with the inputs to validate
         */
        function getInputsToValidate() {
            var inputsToValidate = new Array();

            // Add specific inputs
            inputsToValidate.push(
                $('select[id*="object_select"]'),
                $('input[id*="name"]')
            );

            // Validate required field selection if SUM option selected
            if ($('input[id*="selectedRadio:1"]').is(':checked')) {
                inputsToValidate.push(
                    $('select[id*="displaySelectFieldList"]')
                );
            } else {
                // Remove Validation  if any for Actual value field, if Record Count option is selected
                $('select[id*="displaySelectFieldList"]').parent().find('.errorMsg').remove();
            }

            return inputsToValidate;
        }

        /**
         * Shows the save popup message
         */
        function showSavePopUp() {
            // Set popup message depending if it's editing or not
            if (isEditing) {
                $('#popup_message').text('{!JSENCODE($Label.PERFORMANCE_TARGET_SAVE_POPUP_TEXT)}');
            } else {
                $('#popup_message').text('{!JSENCODE($Label.INDICATOR_SAVE_POPUP)}');
            }
            $('.save_popup').show();
        }

        $(document).ready(function() {
            addCurrentPeriodToOptions();
        });
    </script>
</apex:page>
