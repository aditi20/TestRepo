<!--(c) Copyright 2013 Grameen Foundation USA. All rights reserved-->
<apex:page sidebar="false" controller="JobActivitiesListController" id="page" extensions="RemoteActionUtils">
  <apex:sectionHeader title="{!$Label.HOME}" subtitle="{!$Label.JOB_ACTIVITIES}"/>
    <!-- Components -->
    <c:blockOverlay label="{!$Label.LOADING}..."/>
    <c:lookupPopup />

    <style type="text/css">
        .jobActivitiesTable {
            border: solid 1px #ccc;
        }
        .jobActivitiesTable td {
            word-break: break-word;
            padding: 4px 5px;
            border-top: solid 1px #eee;
        }
        .jobActivitiesTable th {
            font-weight: bold;
            border: none;
            border-right: 1px solid #e0e3e5;
            font-size: .9em;
            background: #f2f3f3;
            padding-left: 8px !important;
        }
        .jobActivitiesTable tr {
            background: #FDFDFD;
        }
        a.noAnchor {
            color:#333;
            font-style: normal;
            text-decoration: none;
        }

        a.noAnchor:hover {
            color:#333;
            font-style: normal;
            text-decoration: none;
        }
        .refreshSectionButtonContainer {
            margin-bottom: 20px;
        }
        .selectJobTemplates{
            width: 150px;
        }
        .selectJobTemplatesContainer{
            margin-left: 44px;
            margin-bottom: 15px;
        }
        .selectJobTitle{
            margin-right: 5px;
        }
        .filtersContainer{
            margin-left: 13px;
        }
        .applyFilters{
            float: right;
            margin-right: 10px !important;
            width: 80px;
            height: 25px;
        }
        .tableFilterContainer .staffFilterColumn{
            width: 16%;
        }
        .tableFilterContainer .clientFilterColumn{
            width: 16%;
        }
        .tableFilterContainer .taskFilterColumn{
            width: 22%;
        }
        .tableFilterContainer .startedFilterColumn{
            width: 14%;
        }
        .tableFilterContainer .finishedFilterColumn{
            width: 14%;
        }
        .tableFilterContainer .applyButtonColumn{
            width: 7%;
        }
        #filterStaff, #filterClient{
            float: left;
            width: 75%;
        }
        .findStaffContainer, .findClientContainer{
            float: left;
            margin-left: 8px;
            height: 24px;
            width: 24px;
        }
        .taskTemplatesSelect{
            width: 90%;
            min-width: 150px;
        }
    </style>

    <apex:includeScript value="{!$Resource.jquery}" />
    <apex:includeScript value="{!$Resource.underscore}" />
    <apex:includeScript value="{!$Resource.backbone}" />
    <apex:includeScript value="{!$Resource.js_utils}" />

    <apex:includeScript value="{!URLFOR($Resource.js, 'dateFormat.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.js, 'jobActivitiesModels.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.js, 'jobActivitiesViews.js')}" />


    <apex:form >
        <div class="selectJobTemplatesContainer">
            <span class="selectJobTitle" > {!$Label.JOB_ACTIVITIES_SELECT_JOB} </span>
            <select id="jobTemplatesSelect" class="selectJobTemplates" >
                <option name="-1" > {!$Label.ALL} </option>
                <apex:repeat var="jobTemplate" value="{!listJobTemplates}">
                    <option name="{!jobTemplate.Id}" >
                        {!jobTemplate.Name}
                    </option>
                </apex:repeat>
            </select>
        </div>

        <apex:pageBlock id="filterActivitiesContainer" mode="edit" title="{!$Label.FILTER}">
            <div class="filtersContainer">
                <table class="tableFilterContainer" >
                    <tr>
                        <td class="staffFilterColumn" > {!$Label.JOB_ACTIVITIES_STAFF} </td>
                        <td class="clientFilterColumn" > {!$Label.JOB_ACTIVITIES_CLIENT} </td>
                        <td class="taskFilterColumn" > {!$Label.JOB_ACTIVITIES_TASK} </td>
                        <td class="startedFilterColumn" > {!$Label.JOB_ACTIVITIES_STARTED} </td>
                        <td class="finishedFilterColumn" > {!$Label.JOB_ACTIVITIES_FINISHED} </td>
                        <td class="applyButtonColumn"></td>
                    </tr>
                    <tr>
                        <td>
                            <input type="text" id="filterStaff" />
                            <div class="findStaffContainer" >
                                <apex:image value="{!URLFOR($Resource.IconPackage, '/actions/document-preview.png')}" title="{!$Label.JOB_ACTIVITIES_STAFF_LOOKUP}" />
                            </div>
                        </td>
                        <td>
                            <input type="text" id="filterClient" />
                            <div class="findClientContainer" >
                                <apex:image value="{!URLFOR($Resource.IconPackage, '/actions/document-preview.png')}" title="{!$Label.JOB_ACTIVITIES_CLIENT_LOOKUP}" />
                            </div>
                        </td>
                        <td>
                            <select id="taskTemplatesSelect" class="taskTemplatesSelect" >
                                <option name="-1" > {!$Label.ALL} </option>
                                <apex:repeat var="taskTemplate" value="{!listTaskTemplates}">
                                    <option name="{!taskTemplate.Id}" class="{!taskTemplate.JobTemplate__c}" >
                                        {!taskTemplate.Name}
                                    </option>
                                </apex:repeat>
                            </select>
                        </td>
                        <td> <apex:inputText onfocus="DatePicker.pickDate(false, this, false);" id="dateStarted" styleClass="dateStarted" /> </td>
                        <td> <apex:inputText onfocus="DatePicker.pickDate(false, this, false);" id="dateFinished" styleClass="dateFinished" /> </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td></td><td></td><td></td><td></td><td></td>
                        <td>
                            <input type="button" class="applyFilters" id="applyFilters" value="{!$Label.JOB_ACTIVITIES_APPLY}" />
                        </td>
                    </tr>
                </table>
            </div>
        </apex:pageBlock>

        <apex:pageBlock id="jobActivityPageBlock" >
            <apex:pageBlockSection columns="1"  collapsible="false" id="refreshJobActivitySection">
                <div class="refreshSectionButtonContainer">
                    <input type="button" class="btn" id="btnRefreshJobActivities" value="{!$Label.JOB_ACTIVITIES_CLEAR_FILTER}" onclick="retrieveJobActivities()" />
                </div>
            </apex:pageBlockSection>

            <div id="jobActivityList_container"></div>

        </apex:pageBlock>

    </apex:form>

    <script id="jobActivitiesList_template" type="text/template">
     <% var tableCaptions =["{!JSENCODE($Label.SURVEY_RESULT_SUBMITTED_COLUMN)}",
                            "{!JSENCODE($Label.SURVEY_QUESTION_SECTION_NAME)}",
                            "{!JSENCODE($Label.JOB_ACTIVITIES_LIST_STAFF)}",
                            "{!JSENCODE($Label.JOB_ACTIVITIES_LIST_CLIENT)}",
                            "{!JSENCODE($Label.JOB_ACTIVITIES_LIST_TASKS_NUMBER)}",
                            "{!JSENCODE($Label.JOB_ACTIVITIES_LIST_STARTED)}",
                            "{!JSENCODE($Label.JOB_ACTIVITIES_LIST_FINISHED)}",
                            "{!JSENCODE($Label.JOB_ACTIVITIES_LIST_DURATION)}",
                            "{!JSENCODE($ObjectType.JobTemplate__c.Label)}"]  %>

        <% if (jobActivitiesModels.length == 0) {%>
            <div id="noTaskErrorMsg" class="errMsg">{!$Label.JOB_ACTIVITIES_NO_JOB_ACTIVITIES}</div>
        <%}
        else {%>
            <table class="jobActivitiesTable" id="tblJobActivities" width="100%">
                <tr>
                    <%
                        _.each(tableCaptions, function(item) { %>
                            <th><%- item %></th>
                        <%});
                    %>
                </tr>

                <%   _.each(jobActivitiesModels, function(jobActivity) {
                      %>
                        <tr>
                            <td>
                                <span class="jobSubmittedDate">
                                <% if ( jobActivity.get(SUBMITTED_ATTR) != '') {%>
                                    <%= jobActivity.get(SUBMITTED_ATTR) %>
                                <% }%>
                                </span>
                            </td>
                            <td>
                                <span class="jobId" style="display:none"> <%- jobActivity.get(ID_ATTR) %></span>
                                <a href="/<%= jobActivity.get(ID_ATTR)%>" class="jobName"><%= jobActivity.get(NAME_ATTR) %></a>
                            </td>
                            <td>
                                <span class="jobStaff">  <%= jobActivity.get(STAFF_ATTR) %></span>
                            </td>
                            <td>
                                <span class="jobClient">  <%= jobActivity.get(CLIENT_ATTR) %></span>
                            </td>
                            <td>
                                <span class="jobTasksNumber">  <%- jobActivity.get(TASK_NUMBER_ATTR) %></span>
                            </td>
                            <td>
                                <span class="jobStartDate">
                                <% if ( jobActivity.get(STARTED_ATTR) != UNDEFINED_VALUE ) {%>
                                    <%= dateFormat( jobActivity.get(STARTED_ATTR), CUSTOM_DATE_TIME) %>
                                <%}%>
                                </span>
                            </td>
                            <td>
                                <span class="jobFinishedDate">
                                <% if ( jobActivity.get(FINISHED_ATTR) != UNDEFINED_VALUE) {%>
                                    <%= dateFormat( jobActivity.get(FINISHED_ATTR), CUSTOM_DATE_TIME ) %>
                                <% }%>
                                </span>
                            </td>
                            <td>
                                <span class="jobDuration">  <%- millisecondsToString( jobActivity.get(DURATION_ATTR) ) %></span>
                            </td>
                            <td>
                                <a href="/<%= jobActivity.get(JOB_TEMPLATE_ID_ATTR)%>" class="jobTemplateName">
                                    <%= jobActivity.get(JOB_TEMPLATE_NAME_ATTR) %>
                                </a>
                            </td>

                        </tr>
                <% }); %>


             </table>
           <%}%>

    </script>

    <script>

        //------------------------Constants and labels-------------------------

        // Constants
        var STAFF_ATTR              = 'Staff';
        var CLIENT_ATTR             = 'Client';
        var TASK_NUMBER_ATTR        = 'TasksNumber';
        var NAME_ATTR               = 'Name';
        var SUBMITTED_ATTR          = 'Submitted';
        var STARTED_ATTR            = 'Started';
        var FINISHED_ATTR           = 'Finished';
        var JOB_TEMPLATE_ID_ATTR    = 'JobTemplateId';
        var DURATION_ATTR           = 'Duration';
        var JOB_TEMPLATE_NAME_ATTR  = 'JobTemplateName';
        var ID_ATTR                 = 'id';
        var UNDEFINED_VALUE         = '-1';
        var CUSTOM_DATE_TIME        = 'customDateTime';

        //------------------------End constants and labels----------------------

        var currentLookupPopup;                                         // Variable that holds the current lookup popup.
        var mapTaskJobActivities    = {!mapTaskJobActivities};          // Map that holds the relations between tasks an Jobs.
        var jobActivitiesCollection = new JobActivityCollection();      // Collection of JobActivities.
        var jobActivityTable        = new JobActivityTable({el: $('#jobActivityList_container')});;

        function finishRetrieveJobActivities(result, event) {

            if(event.status) {
                //add activities retrieved from the controller to the collection.
                jobActivitiesCollection = new JobActivityCollection();
                jobActivitiesCollection.add(result);
                setJobActivities();
            }
            else{
                alert('{!JSENCODE($Label.GENERAL_ERROR_RETRIEVING_DATA)}');
            }
            unblockPage();
        }

        function setJobActivities() {
            jobActivityTable.setJobActivities(jobActivitiesCollection);
            jobActivityTable.renderTable();
        }

        $(document).ready(function() {
            blockPage();
            retrieveJobActivities();
        });

        /**
         *  Method in charge to retrieve data from the filters and pass it to the collection
         *  @param Job template to filter (false if no Job template is selected).
         */
        function filterData(){

            // Obtain the filters the user set...
            var jobTemplateId       = $('#jobTemplatesSelect').find('option:selected').attr('name');
            var idSelectedTask      = $('#taskTemplatesSelect').find('option:selected').attr('name');
            var clientEnteredText   = $('#filterClient').val();
            var staffEnteredText    = $('#filterStaff').val();
            var startedEnteredDate  = $('.dateStarted').val();
            var finishedEnteredDate = $('.dateFinished').val();

            // ... obtain the list of job activities that matches those filters...
            var filteredActivities  = jobActivitiesCollection.filterData(jobTemplateId, clientEnteredText, staffEnteredText, startedEnteredDate, finishedEnteredDate, idSelectedTask);
            // ... and render the table with the filtered data.
            jobActivityTable.renderFilteredTable(filteredActivities);
        }

        /**
         *  Method in charge of filter Tasks displaying only those related to the selected job template.
         *
         *  @param JobTemplate Id.
         */
        function filterTasksByJobTemplate(jobTemplateId){
            var taskTemplateOptions = $('#taskTemplatesSelect option');

            if (jobTemplateId == UNDEFINED_VALUE) {
                // Is "All" option, so we show all options from the tasks.
                disableStatusOnList(taskTemplateOptions, false);
            }
            else{
                // Hides all options from the tasks...
                disableStatusOnList(taskTemplateOptions, true);

                taskTemplateOptions.each(function( index ) {
                    if ($(this).attr('class') == jobTemplateId || $(this).attr('name') == UNDEFINED_VALUE) {
                        // If the task is related to the job, or there is not selected job ('All'), display the element.
                        enableElement($(this));
                    }
                });
            }
            // Set "All" option as selected.
            $("#taskTemplatesSelect option[name='" + UNDEFINED_VALUE + "']").attr("selected", "selected");
        }

        /**
         *  Method in charge of set disabled attribute of each object of a give jQuery list.
         *
         *  @param jQueryList List of jQuery objects to be modified.
         *  @param shouldDisable True if should disable each object, false if should enable.
         */
        function disableStatusOnList(jQueryList, shouldDisable){
            $.each(jQueryList, function(index, value) {
                var jsObject      = $(this).get(0);
                jsObject.disabled = shouldDisable;
                if(shouldDisable){
                    $(jsObject).hide();
                }else{
                    $(jsObject).show();
                }
            });
        }

        /**
         *  Method in charge of set disable attibute of a given jQuery object.
         *
         *  @param jQuery object to be modified.
         */
        function enableElement(jQueryObject){
            var jsObject = jQueryObject.get(0);
            jsObject.disabled = false;
            $(jsObject).show();
        }

        /**
         *  Called when the user clicks on "Apply" filters button.
         */
        $('#applyFilters').click(function(){
            filterData();
        });

        /**
         *  Called when the user changes the selected job template.
         */
        $('#jobTemplatesSelect').change(function(){
            filterTasksByJobTemplate($(this).find('option:selected').attr('name'));
            filterData();
        });

        /**
         *  Method in charge to retrieve job activities.
         */
        function retrieveJobActivities() {

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.JobActivitiesListController.getJobActivities}',
                finishRetrieveJobActivities
            );
        }

        /**
         *  Called when the user clicks on the lookup button to find a staff.
         */
        $('.findStaffContainer').click( function(){
            blockPage();
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.RemoteActionUtils.getStaffs}',
                openLookupStaff,
                {escape: false}
            );
        });

        /**
         *  Called when the user clicks on the lookup button to find a client.
         */
        $('.findClientContainer').click( function(){
            blockPage();
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.RemoteActionUtils.getClients}',
                openLookupClient,
                {escape: false}
            );
        });

        /**
         *  Success method of retrieve contacts (in order to display them in the popup)
         *  when the user clicked in staff lookup.
         */
        function openLookupStaff(result, event){
            if(event.status){
                // Create and open lookup popup.
                currentLookupPopup = new lookupPopupComponent($('body'), result, '{!JSENCODE($Label.JOB_ACTIVITIES_STAFF_LOOKUP)}', '#filterStaff');
                currentLookupPopup.openLookupPopup();
            }
            else
            {
                alert('{!JSENCODE($Label.GENERAL_ERROR_RETRIEVING_DATA)}');
            }
            unblockPage();
        }

        /**
         *  Success method of retrieve contacts (in order to display them in the popup)
         *  when the user clicked in client lookup.
         */
        function openLookupClient(result, event){
            if(event.status){
                // Create and open lookup popup.
                currentLookupPopup = new lookupPopupComponent($('body'), result, '{!JSENCODE($Label.JOB_ACTIVITIES_CLIENT_LOOKUP)}', '#filterClient');
                currentLookupPopup.openLookupPopup();
            }
            else
            {
                alert('{!JSENCODE($Label.GENERAL_ERROR_RETRIEVING_DATA)}');
            }
            unblockPage();
        }

    </script>


 </apex:page>
