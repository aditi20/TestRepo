<!--(c) Copyright 2013 Grameen Foundation USA. All rights reserved-->
<apex:page sidebar="false" tabStyle="SurveyManager__tab" showHeader="true" standardController="Survey__c"
    extensions="SurveyFieldMappingController">

    <!-- Component -->
    <c:blockOverlay label="{!$Label.LOADING}..."/>

    <!-- Scripts to include -->
    <apex:includeScript value="{!$Resource.jquery}" />
    <apex:includeScript value="{!URLFOR($Resource.encoder, 'Class.create.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.encoder, 'encoder.js')}" />

    <!-- Styles -->
    <style type="text/css">
        .warningM5{
            font-size:12px;
            width:123px;
            margin-left: 4px !important;
        }
        .SelectedField{
            font-size:12px;
        }
        #questionArea table{
            padding: 10px;
            width:100%
        }
        .scores{
            width: 35px;
            border-left-style: solid;
            border-left-width: 1px;
            border-right-style: solid;
            border-right-width: 1px;

        }
        .section{
            color:black;
            height:37px;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 18px;
            padding: 8 px;
            padding-left: 18px;
            height:37px;
        }
        .dropdown{
            width:140px;
            margin-left: 3px;
            margin-right: 3px;
        }
        .question,.section{
            padding:8px;
            height:37px;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 18px;
            padding-left:0px!important;
        }
        #buttons {margin:20px 2px;float:right;}

        .question{

            color:gray; !important;
            background-color:gainsboro; !important;
            height:37px;
            color:#777;
        }

        #tableMappings tr {
            border: 2px solid #f8f8f8;
        }

        #tableMappings tr.questionLevel {
            border: none;
            border-left: 2px solid #f8f8f8;
            border-right: 2px solid #f8f8f8;
        }

        #tableMappings tr.questionCascading {
            border: none;
            border-left: 2px solid #f8f8f8;
            border-right: 2px solid #f8f8f8;
        }

        .HeadColumns{
            text-align:right;
            overflow:hidden
        }
        .errorMsg{
            font-size: 12px;
            width: 140px;
            padding-left: 4px;
            margin-bottom: 5px;
        }
        p{
            margin-top:2px;
        }
        .removeLink{
            color:blue!Important;
            cursor:pointer;
            margin-left:8px;
        }
        .questionAndSections, .table2{
            vertical-align:top;
        }
        .questionAndSections td, .table2 td{
            padding:8px;
        }
        #IntervieweeLabel{
            font-size:90%;
        }

        .selectHeader, .childSelect, .idFieldClass{
            width: 140px;
            margin: 0 3px 5px 3px;
        }

        .removeColumnAnchor{
            color:blue !important;
            cursor:pointer;
            margin-left:8px;
        }
        .setRelationAnchor{
            color:blue !important;
            cursor:pointer;
            margin-left: 10px;
        }
        .setRelationAnchorChange{
            color:blue !important;
            cursor:pointer;
            float:left;
            font-size: 11px;
            margin-left: 10px;
        }
        .relatedFieldSpan{
            word-break: break-word;
            margin-left: 10px;
            float: left;
            width: 100%;
        }
        .repeatedCombo{
            border: 2px solid #C00;
        }

        .staticQuestionMsg{
            font-size: 13px;
            color: gray;
        }

        .comboTitle{
            width: 55px;
            margin-top: 7px;
            font-weight: bold;
        }
        .relatedObjectRow{
            width: 54px !important;
        }
        .relativeContainer{
            position:relative;
            z-index:99999999;
        }
        .relationsFieldsTable{
            padding-left: 2px !important;
        }
        .relationsFieldsTable tr:nth-child(even) {
            background: #EEE;
        }
        .relatedFieldsContainer{
            display:none;
            border: 1px black solid;
            position: absolute;
            background-color : #F8F8F8;
            right: 120px;
            padding: 10px;
            min-width: 160px;
            overflow: hidden;
            white-space: nowrap;
        }
        .checkboxFieldsRelatedContainer{
            padding : 1px !important;
            background : #F8F8F8 !important;
        }

        .relateObjectsDialog div.actionRelatedButtons{ text-align: right; }
        .relateObjectsDialog div.actionRelatedButtons>*{ margin: 4px 5px 0; }

        .checkboxRelatedField, .spanRelatedField, .tdFieldName{
            padding: 1px !important;
        }
        .ulFieldsRelated{
            list-style-type: none;
            padding-left : 0px !important;
        }
        .relatedFieldRow{
            padding-left : 0px !important;
        }
        .cancelAddRelationFields{
            cursor:pointer;
        }
        .masterObjectRow{
            background-color: gainsboro;
            height: 37px;
            color: #777;
        }
        .masterObjectNameContainer{
            width: 35%;
            float: left;
            word-break: break-word;
            padding-right: 6px;
            height: 100%;
        }
        .relatedObjectFieldName{
            font-size: 15px;
            font-weight: normal;
        }
        .disabledRepeated{
            width: 140px;
        }
        .fakeSetRelationAnchor{
            color:#777 !important;
            margin-left: 12px;
        }
        .repeatedTag{
            color: #666;
            float: right;
            display: block;
            font-family: sans-serif;
            font-size: 65%;
            padding-top: 20%;
            white-space: nowrap;
        }
        .repeatSectionTag{
            display: block;
            width: 50px;
        }
		.disableIntervieweeContainer{
            color: grey;
            font-style: italic;
        }
        .repeatMessage{
            padding-left: 5px;
            word-break: break-word;
            margin-left: 2px;
            margin-right: 5px;
            font-style: italic;
        }
        tr>td:first-child{width:1px;}
        td.caption{min-width:200px}
        td.questionAutoNumber{color:#6d6d6d;padding-left:10px;padding-right:10px;}

        .helpSection {
            font-size: 13px;
        }

        .helpTextSectionTitle {
            font-weight:bold;
            cursor:pointer;
        }

        .helpTextSectionTitlePlus {
            font-size: 18px;
            text-decoration:none;
            cursor:pointer;
        }



    </style>

    <!-- Scripts -->
     <script id="sectionFM-template" type="text/template">
        <td class="questionAutoNumber">
            <%- sectionHeader %>
        </td>
        <td class="tertiaryPalette readonly section caption">
            <span class="caption"> <%- caption %> </span>
            <br>
        </td>
        <td></td>

        <% for(var i = 0; i<columnsLength; i++) { %>
            <td></td>
        <% }%>

        <% if(typeOfSection == SECTION_REPEAT) { %>
            <td class="repeatSectionTag">
                <span class="repeatedTag" >{!$Label.SECTION_REPEAT}</span>
            </td>
        <% }else{ %>
            <td/>
        <% } %>
    </script>

    <script id="cascadingSelectFM-template" type="text/template">
        <td class="questionAutoNumber">
            <%- questionHeader %>
        </td>
        <td class="question caption">
            <span class="caption">
                <%- caption %>
            </span>
            <br>
        </td>
        <% for(var i = 0; i<=columnsLength; i++) { %>
            <td></td>
        <% }%>
        <td/>
    </script>

    <script id="questionFM-template" type="text/template">
        <td class="questionAutoNumber">
            <%- questionHeader %>
        </td>
        <td class="question caption">
            <span class="caption">
                <%- caption %>
            </span>
            <br>
            <% if(typeOfQuestion == 'static') { %>
                <span class="staticQuestionMsg" >{!$Label.SURVEY_MAPPING_FIELD_MAPPING_FOR_STATIC}</span>
            <% }else if(typeOfQuestion == 'end_of_survey') { %>
                <span class="staticQuestionMsg" >{!$Label.SURVEY_MAPPING_FIELD_MAPPING_FOR_END_SURVEY}</span>
            <% }%>
        </td>
        <td></td>

        <% if (totalChildren > 0) {
               for(var i in listOfChildren) {
                    var listOfObject = listOfChildren[i].get('fieldList') ; %>
                    <td class="<%- listOfChildren[i].get(RELATED_COMBO_ATTR) %>" >
                        <% if(typeOfQuestion != 'static' && typeOfQuestion != 'end_of_survey' && typeOfQuestion != 'cascading-select') {
                            if( listOfChildren[i].get(DISABLE_REPEATED) || listOfChildren[i].get(DISABLE_SPECIAL_RELATION) || listOfChildren[i].get(DISABLE_SPECIAL_DIFF_REP) || listOfChildren[i].get(DISABLE_REFERENCE) ){
                                // Prepare the message to display when the user hover above this question mapping.
                                var popupToDisplay  = (listOfChildren[i].get(DISABLE_REPEATED)) ? 'title="{!JSENCODE($Label.SURVEY_MAPPING_CANT_MAP_REPEATED)}"'
                                                                                                : (listOfChildren[i].get(DISABLE_SPECIAL_RELATION))
                                                                                                    ? 'title="{!JSENCODE($Label.SURVEY_MAPPING_CIRCULAR_CASE_REPEATED)}"'
                                                                                                    : (listOfChildren[i].get(DISABLE_SPECIAL_DIFF_REP))
                                                                                                        ? 'title="{!JSENCODE($Label.SURVEY_MAPPING_DIFFERENT_REPEAT_SPECIAL)}"'
                                                                                                        : 'title="{!JSENCODE($Label.SURVEY_MAPPING_REFERENCE_ALLOW_ONE_FIELD)}"';
                                %>
                                <select disabled="disabled" class="disabledRepeated" <%= popupToDisplay %> >
                                    <option value="-1" selected="selected">
                                        -
                                    </option>
                                </select>
                            <% }else{
                                var isFieldRequired = false; %>
                                <select class="childSelect <%- (listOfChildren[i].get(CHILDREN_REPEAT_ATTR)) ? 'repeatedCombo' : '' %>" <%-(listOfChildren[i].get('disable') || disable)? ' disabled= true ':'' %> >
                                    <% for(var e in listOfObject ){
                                        var comboData           = listOfObject[e];
                                        var isReference         = _.contains(listReferenceObj, listOfChildren[i].get(RELATED_COMBO_ATTR));
                                        var isReferenceRequired = _.contains(listSmRelatedReq, listOfChildren[i].get(RELATED_COMBO_ATTR));
                                        if(comboData.selected) var selectedLabel = comboData.label;
                                        if( (!isReference && comboData.selected && comboData.required) || ( isReference && isReferenceRequired && comboData.selected && comboData.value != UNDEFINED_VALUE) ) {
                                            // If it is not reference, we check that the field is selected and required in order to display required message,
                                            // If it is reference, we check that has a relation with a master-detail or required lookup.
                                            isFieldRequired = true;
                                        } %>
                                        <option value="<%- comboData.value %>" name="<%- listOfChildren[i].get(RELATED_COMBO_ATTR) %>" <%= (comboData.selected)? 'selected="selected"'  : '' %> >
                                            <%- comboData.label %>
                                        </option>
                                    <% } %>
                                </select>
                                <% if(listOfChildren[i].get(CHILDREN_REPEAT_ATTR)) { %>
                                    <p class="errorMsg">
                                        <%- '{!JSENCODE($Label.SURVEY_MAPPING_REPEATED_FIELDS)}'.format([ selectedLabel, listOfChildren[i].get(CHILDREN_REPEAT_ATTR) ]) %>
                                    </p>
                                <% }
                                if(isFieldRequired) {
                                    if( isReference ){ %>
                                        <p class="message warningM5">{!$Label.SURVEY_MAPPING_REQ_FIELD_ON_RELATION}</p>
                                <%  }
                                    else{
                                        // Is not a reference object %>
                                        <p class="message warningM5">{!$Label.SURVEY_MAPPING_REQ_FIELD}</p>
                                <%  }

                                 }
                              }
                         } %>
                    </td>
                <% }
           } %>
           <td/>
    </script>



    <script id="masterObjectFM-template" type="text/template">
       <td class="masterObjectNumber" name="<%- selectedParent.id %>">

       </td>
        <td class="section caption relatedObjectRow">
            <div class="masterObjectNameContainer" >
                <%- selectedParent.label %>
            </div>
            <div class="relatedObjectFieldName" >
                <%- selectedParent.idFieldLabel %>
            </div>
        </td>
        <td></td>
        <% for(var i in surveyMappingList) {
               // Start iterating over child survey mappings.
               var surveyMappingName      = surveyMappingList[i].get(OBJECT_NAME_ATTR);
               var currentSurveyMappingId = surveyMappingList[i].get('id');
               var listOfRelatedFields    = (isNotUndefined(childrenRelations[surveyMappingName])) ? childrenRelations[surveyMappingName] : [];
               var isChildReference       = isNotUndefined( surveyMappingList[i].get(IS_REFERENCE_ATTR) ) ? surveyMappingList[i].get(IS_REFERENCE_ATTR) : false; %>
            <td>
                <% if(listOfRelatedFields.length > 0 && currentSurveyMappingId != selectedParent.id ){
                       // Has at least one potential relation, and is not the same object.
                       var fieldsOfChildren = relatedFields[currentSurveyMappingId];
                       if( isNotUndefined(fieldsOfChildren) && _.size(fieldsOfChildren) > 0 ){
                          // Has at least one relation set...
                          for(var a in fieldsOfChildren){
                              // For each set relation, writes it. %>
                              <span class="relatedFieldSpan">
                                <%- fieldsOfChildren[a].label %> (<%- fieldsOfChildren[a].relation %>)
                              </span>
                          <% } %>
                          <br />
                          <a class="setRelationAnchorChange"> {!$Label.SURVEY_MAPPING_CHANGE} </a>
                       <% }else{

                                var isParentOfSelf = _.contains(parentNodes, currentSurveyMappingId);
                                if (isChildReference) {
                                    // Child object is reference so we disable the relationship. %>
                                    <span class="fakeSetRelationAnchor" title="{!$Label.SURVEY_MAPPING_CHILD_IS_REFERENCE}" > {!$Label.SURVEY_MAPPING_SET_RELATION} </span>
                                <% }
                                else if (isParentOfSelf) {
                                    // Is parent, grandparent etc of this master object, so we display a message
                                    // warning about the circular dependency. %>
                                    <span class="fakeSetRelationAnchor" title="{!$Label.SURVEY_MAPPING_CIRCULAR_DEPENDENCY}" > {!$Label.SURVEY_MAPPING_SET_RELATION} </span>
                                <%} else {
                                    var hasDifferentRepeatMapping = isNotUndefined(differentRepeats) && _.contains(differentRepeats, currentSurveyMappingId);
                                    if(hasDifferentRepeatMapping){
                                        // This, and current child are mapped to different repeat sections, so we disable this relation. %>
                                        <span class="fakeSetRelationAnchor" title="{!$Label.SURVEY_MAPPING_DIFFERENT_REPEAT_SECTIONS}" > {!$Label.SURVEY_MAPPING_SET_RELATION} </span>

                                <%  }else{
                                        // Now we must validate that the current child is not parent of a repeat different than the parent (if it is repeat).
                                        var repeatsIdsOfChild           = _.find(mapParentsOfRep, function(mapChild){ return mapChild.parentId == currentSurveyMappingId; });
                                        var reducedRepeatIds            = _.uniq(repeatsIdsOfChild.repeatList); // The repeats Id's may be repeated (because are set in relation and in the repeat itself), so we remove repeated values.

                                        var isChildParentOfRepeat              = (isNotUndefined(repeatsIdsOfChild) && reducedRepeatIds.length > 0 );
                                        var isParentRepeat                     = isNotUndefined(repeatedIdAttr);
                                        var isParentAndChildSettedToSameRepeat = (reducedRepeatIds.length == 1
                                                                                                      && reducedRepeatIds[0] == repeatedIdAttr );

                                        var isAbleBecauseChildRepeats          = (!isChildParentOfRepeat || !isParentRepeat ||
                                                                                                isParentAndChildSettedToSameRepeat);

                                        if(!isAbleBecauseChildRepeats){ %>
                                            <span class="fakeSetRelationAnchor" title="{!$Label.SURVEY_MAPPING_CANT_RELATE_BECAUSE_PARENT_OF_REPEAT}" > {!$Label.SURVEY_MAPPING_SET_RELATION} </span>
                                    <%  }
                                        else{
                                            // Has potential relations, but none of them set, has not potential circular dependencies, are not in different repeat sections
                                            // and (either has no repeat set, or has repeat set and the child is not parent of any object with repeat set). %>
                                            <a class="setRelationAnchor" > {!$Label.SURVEY_MAPPING_SET_RELATION} </a>
                                     <% }
                                    }
                                } %>
                       <% } %>
                    <div class="relativeContainer relateObjectsDialog" >
                        <div class="relatedFieldsContainer" name="<%- currentSurveyMappingId %>" >
                            <!-- Div containing the popup of potential relations. -->
                            <% var currentSMUsedFields = _.find(usedFields, function(listUsedFields, smId){ return smId == currentSurveyMappingId; }); %>
                            <table class="relationsFieldsTable" >
                                <% for(var e in listOfRelatedFields){
                                    // Iterates over the list of relations, in order to display them.
                                    // Boolean that represents if the current field is selected.
                                    var isFieldChecked = (isNotUndefined(relatedFields[currentSurveyMappingId]) && isNotUndefined(_.find(relatedFields[currentSurveyMappingId], function(rf){
                                                                                                                                                                                    return rf.name == listOfRelatedFields[e].get(FIELD_NAME_ATTR);
                                                                                                                                                                                            })));
                                    // Boolean that represents if the current field is already used for another master object.
                                    var isFieldAlreadyUsed = isNotUndefined(currentSMUsedFields) && isNotUndefined(_.find(currentSMUsedFields, function(relationField){ return relationField.fieldName == listOfRelatedFields[e].get(FIELD_NAME_ATTR)   // Same object field...
                                                                                                                                                                            && relationField.parentObjectId != selectedParent.id; }));                  // ... and is not the same parent.
                                    %>
                                    <tr title="<%- (isFieldAlreadyUsed) ? '{!JSENCODE($Label.SURVEY_MAPPING_ANOTHER_RELATION_IS_SETTED)}' : '' %>" >
                                        <td class="checkboxFieldsRelatedContainer" >
                                            <input class="checkboxRelatedField" type="checkbox" name="<%- listOfRelatedFields[e].get(FIELD_NAME_ATTR) %>"
                                                <%- (isFieldChecked) ? 'checked="checked"'      // Is checked
                                                                     : (isFieldAlreadyUsed)
                                                                        ? 'disabled="disabled"' // Is already used
                                                                        : '' %> />
                                        </td>
                                        <td class="tdFieldName" >
                                            <span class="spanRelatedField" name="<%- listOfRelatedFields[e].get(FIELD_NAME_ATTR) %>" >
                                                <%- listOfRelatedFields[e].get(FIELD_LABEL_ATTR) %>
                                            </span>
                                            (<span class="spanRelationType" name="<%- listOfRelatedFields[e].get(REQUIRED_ATTR) %>" >
                                                <%- listOfRelatedFields[e].get(FIELD_TYPE_ATTR) %>
                                             </span>)
                                        </td>
                                    </tr>
                                <% } %>
                            </table>

                            <div class="actionRelatedButtons">
                                <a class="cancelAddRelationFields" >{!$Label.CANCEL}</a>
                                <input class="addRelationFields" type="button" value="{!$Label.DONE}" />
                            </div>
                        </div>
                    </div>
                <% } %>
            </td>
        <% }%>
        <td />
    </script>

    <!-- /TEMPLATES -->

    <script>
        //-----------------------------GLOBAL VARIABLES----------------------------------------

        var questionsObject;
        var myHeaderColumn = {!headerColumnsJson};
        var currentSelectedCombo;             // Class of the last changed combo.
        var currentSelectedComboValue;        // Value of the last changed combo.
        var currentSelectedComboLabel;        // Label of the last changed combo.
        var fMPage;                           // Page model.
        var surveyIdToDelete;                 // Global variable that stores the id of the survey that will be removed (set when user clicks on remove column).
        var continueToPreview = false;        // Global variable that stores if user should continue to preview page or not.
        var mapObjectIdToRequiredFields = {}; // Map that stores fields selected in question mapping for each survey mapping.
        var serverErrors = false;             // Variable to send to template.
        var isPPI = {!isSurveyPPI};           // Variable that holds if the survey is PPI.
        var popupSave = false;                // Variable to show the save popup.
        var mapSMFields = {}                  // Map that holds fields of each field mapping.
        var removeLabel = '{!JSENCODE($Label.SURVEY_MAPPING_REMOVE_COL)}';
        var useAsIntervieewLabel = '{!JSENCODE($Label.BUILDER_LBL_USEASINTERVIEWEE)}';
        var thisWillRemoveIdFieldLabel = '{!JSENCODE($Label.SURVEY_MAPPING_WILL_REMOVE_ID)}';
        var fieldRepeatedOnRelation = '{!JSENCODE($Label.SURVEY_MAPPING_FIELD_ALREADY_ON_RELATION)}';
        var cannotCheckCircular = '{!JSENCODE($Label.SURVEY_MAPPING_CIRCULAR_CASE_CHECKBOX)}';
        var mappingRepeatWillUnsetDescendents = '{!JSENCODE($Label.SURVEY_MAPPING_REPEAT_OBJECT_WILL_UNSET_ID)}';
        var setRelationWillUnsetIdField = '{!JSENCODE($Label.SURVEY_MAPPING_SET_RELATION_WILL_UNSET_ID)}';
        var cannotCheckBecauseDiffRepeats = '{!JSENCODE($Label.SURVEY_MAPPING_DIFFERENT_REPEAT_INTERVIEWEE)}';
        var setRepondentWillUnsetIdField = '{!JSENCODE($Label.SURVEY_MAPPING_SET_RESPONDENT_WILL_UNSET_ID)}';
        var setIntervieweeWillUnsetIdField = '{!JSENCODE($Label.SURVEY_MAPPING_SET_INTERVIEWEE_WILL_UNSET_ID)}';
        var repeatsToMessage = '{!JSENCODE($Label.SURVEY_MAPPING_REPEAT_MESSAGE)}';
        var setIntervieweeWillUnsetRespondent = '{!JSENCODE($Label.SURVEY_MAPPING_SET_INTERVIEWEE_WILL_UNSET_RESPONDENT)}';
        var cantCheckParticularRelationBecauseParentRepeat = '{!JSENCODE($Label.SURVEY_MAPPING_CANT_RELATE_BECAUSE_PARENT_OF_REPEAT_PARTICULAR_CASE)}';
        var cannotSetIntervieweeBecauseRepeat = '{!JSENCODE($Label.SURVEY_MAPPING_INTERVIEWEE_ON_REPEAT)}';
        var isReferenceObjectLabel = '{!JSENCODE($Label.SURVEY_MAPPING_IS_REFERENCE_OBJECT)}';
        var referenceCannotBeInterviewee = '{!JSENCODE($Label.SURVEY_MAPPING_CANT_SET_INTERVIEWEE)}';
        var idFieldIsRequiredForReference = '{!JSENCODE($Label.SURVEY_MAPPING_ID_FIELD_IS_REQUIRED)}';
        var referenceObjectMustBeRelated = '{!JSENCODE($Label.SURVEY_MAPPING_REFERENCE_MUST_BE_RELATED)}';

        //-----------------------------END GLOBAL VARIABLES------------------------------------

        //----------------------------------CONSTANTS------------------------------------------

        var SECTION_NAME              = 'section';
        var SECTION_REPEAT            = 'repeat';
        var BELONGS_REPEAT            = 'belongsToRepeat';
        var DISABLE_REPEATED          = 'disableRepeated';
        var CAPTION_ATTRIBUTE         = 'Caption';
        var SECTION_ATTR              = 'type';
        var NUMBER_HEADER_ATTR        = 'numberHeader';
        var CHILDREN_ATTR             = 'childrenMappedFields';
        var ID_ATTRIBUTE              = 'Id';
        var REQUIRED_ATTR             = 'Required';
        var MODIFIED_ATTR             = 'modified';
        var RELATED_COMBO_ATTR        = 'relatedCombo';
        var FIELD_LIST_ATTR           = 'fieldList';
        var UNDEFINED_VALUE           = '-1';
        var SECTION_SUBMISSION_LABEL  = '{!JSENCODE($Label.SURVEY_MAPPING_SUBMISSION_DATA)}';
        var SURVEY_LABEL              = '{!JSENCODE($ObjectType.Survey__c.Label)}';
        var SURVEY_VERSION_LABEL      = '{!JSENCODE($ObjectType.SurveyVersion__c.Label)}';
        var SURVEY_SUBMISSION_LABEL   = '{!JSENCODE($ObjectType.Submission__c.Label)}';
        var SURVEY_SURVEYOR_LABEL     = '{!JSENCODE($ObjectType.Submission__c.Fields.Surveyor__c.Label)}';
        var SURVEY_PPI_LABEL          = '{!JSENCODE($ObjectType.Submission__c.Fields.PPIScore__c.Label)}';
        var CONTACT_NAME              = '{!$ObjectType.Contact.Name}';
        var SURVEY_NAME               = '{!$ObjectType.Survey__c.Name}';
        var SURVEY_SUBMISSION_NAME    = '{!$ObjectType.Submission__c.Name}';
        var SURVEY_VERSION_NAME       = '{!$ObjectType.SurveyVersion__c.Name}';
        var CHILDREN_RELATIONS        = 'childrenRelations';
        var CHILD_ATTR                = 'child';
        var OBJECT_RELATIONS_MAPPINGS = 'objectRelationsMapping';
        var POSSIBLE_MAPPINGS         = 'possibleSurveyMappings';
        var ID_ATTR                   = 'id';
        var PARENT_ATTR               = 'parent';
        var PARENT_OBJECT_ATTR        = 'parentObject';
        var OBJECT_NAME_ATTR          = 'objectName';
        var OBJECT_LABEL_ATTR         = 'objectLabel';
        var FIELD_NAME_ATTR           = 'fieldName';
        var FIELD_LABEL_ATTR          = 'fieldLabel';
        var FIELD_TYPE_ATTR           = 'relationType';
        var ID_FIELD_LABEL            = 'idFieldLabel';
        var PARENTS_ATTR              = 'parents';
        var MASTER_DETAIL_RELATION    = '{!JSENCODE($Label.MASTER_DETAIL_LABEL)}';
        var CHILDREN_REPEAT_ATTR      = 'childrenRepeated';
        // If a question mapping have DISABLE_SPECIAL_RELATION set to true, it means that should be disabled because
        // if the question mapping is mapped, it would create a circular dependency (because the particular case in 2281).
        var DISABLE_SPECIAL_RELATION  = 'disableSpecialRelation';
        // If has DISABLE_SPECIAL_DIFF_REP set to true, should be disabled because are in different repeats.
        var DISABLE_SPECIAL_DIFF_REP  = 'disableSpecialRelationDiffRepeats';
        var RESPONDENT_ID             = 3;
        var CHECKED_ATTR              = 'checked';
        var REPEAT_ID_ATTR            = 'repeatId';
        var DISABLE_DIFF_REPEATS      = 'disabledDifferentRepeats';
        var UNDEFINED_LABEL           = '-';
        var RELATED_FIELDS_ATTR       = 'relatedFiteredFields';
        var IS_REFERENCE_ATTR         = 'isReference';
        var IS_REFERENCE_OBJECT_ATTR  = 'isReferenceObject';
        var COMPLETE_FIELD_LIST_ATTR  = 'completeFieldList';
        var DISABLE_REFERENCE         = 'disableBecauseReference';
        var CHILDREN_REPEAT_OF_PARENT = 'repeatChildren';
        var LOOKUP_RELATION           = '{!JSENCODE($Label.LOOKUP_LABEL)}';

        //---------------------------------END CONSTANTS---------------------------------------


            /**
            *    Here we ask if it is possible to add a column (we are able to add a new one
            *    if no survey mapping is empty).
            */
            function canAddColumn(surveyElem){
                var isAnySurveyMappingEmpty = $('.selectHeader[value=-1]:visible').length > 0;
                if(!isAnySurveyMappingEmpty){
                    hasUnsavedChanges = true;
                    addColumn(surveyElem);
                }
                else{
                    alert('{!JSENCODE($Label.SURVEY_MAPPING_CANT_ADD_COLUMN)}');
                }
            }
            /*
            * Adds a new field mapping column.
            * also adds an empty MasterObject.
            * @param A survey mapping data if retrieved from the server, false otherwise.
            */
            function addColumn(surveyElem){
                fMPage.addColumn(surveyElem, myHeaderColumn);
                if(!surveyElem) {
                    // New survey mapping added.
                    var listOfSurveyMapping  = retrieveSurveyMappings();
                    var newMasterObjectHtml  = fMPage.addSmToRelations(listOfSurveyMapping);
                    var elementToInsertAfter = obtainLastMasterObjectPosition();
                    elementToInsertAfter.after(newMasterObjectHtml);
                    fMPage.rerenderMasterObjects();
                }
            }

            /**
            *   This method is in charge to retrieve in what section the next master
            *   object will be inserted.
            */
            function obtainLastMasterObjectPosition(){
                var lastMasterRow = $('#HeadColumns');
                if($('.masterObjectRow').length > 0){
                    lastMasterRow = $('.masterObjectRow').last();
                }
                return lastMasterRow;
            }

            /**
            *    Creates a new page model, and questions to be shown.
            */
            function renderQuestionsAndSurveyMappings(){
                fMPage = new FieldMappingPage($('.table2'), questionsObject, isPPI);
            }

           /*
           *    Removes a column.
           *    @param anchor clicked by the user.
           */
           function removeColumnSurveyMapping(removeClicked){
               var containerHeader = removeClicked.parent().parent();
               var selectedHeader = containerHeader.find('.selectHeader');
               surveyIdToDelete = $(selectedHeader).attr('name');
               selectedHeader.val(UNDEFINED_VALUE);
               $(containerHeader).hide();
               $('td.' + surveyIdToDelete).hide();
               fMPage.reloadQuestions(surveyIdToDelete);
               fMPage.removeMasterDetailsRelationsAsFields(surveyIdToDelete);
               fMPage.removeSMOfRelatedObjects(surveyIdToDelete);
               fMPage.removeUsedFieldsOfSurveyMapping(surveyIdToDelete);
               fMPage.removeNodeRelation(surveyIdToDelete);
               $('.masterObjectNumber[name="' + surveyIdToDelete + '"]').parent().remove() // Remove master object from the dom.
               mapObjectIdToRequiredFields[surveyIdToDelete] = {};
               fMPage.rerenderQuestionMappedInReference();
               unblockPage();
           }

           function reloadQuestions(){
               $('.selectHeader[name="' + surveyIdToDelete + '"]').parent().remove();
               fMPage.reloadQuestions(surveyIdToDelete);
               unblockPage();
           }

           $('.removeColumnAnchor').live('click', function(e){
               var answer = confirm('{!JSENCODE($Label.SURVEY_MAPPING_CONFIRM_REMOVE_COL)}');
               if(answer){
                    hasUnsavedChanges = true;
                    blockPage();
                    removeColumnSurveyMapping($(e.currentTarget));
               }
           });

           $('.selectHeader').live('change', function(e){
               blockPage();
               var elementSelected       = $(this).find("option:selected");
               currentSelectedComboValue = elementSelected.attr('value');
               currentSelectedCombo      = $(this).attr('name');
               currentSelectedComboLabel = $.trim($.encoder.encodeForHTML(elementSelected.html()));
               if (currentSelectedComboValue == CONTACT_NAME){
                    // TODO - FIX THIS IDALMSA-4819
                   //$('div.intervieweeContainer[name="' + currentSelectedCombo + '"]').show();
               }
               else{
                   $('div.intervieweeContainer[name="' + currentSelectedCombo + '"]')
                        .hide().find('.intervieweeCheckbox')
                        .removeAttr('checked')
                        .removeAttr('disabled');
               }

               if( $('.referenceObjectCheckbox#' + currentSelectedCombo).attr(CHECKED_ATTR) == CHECKED_ATTR  ){
                    // Reference object is checked, so we uncheck it.
                    document.querySelector('.referenceObjectCheckbox#' + currentSelectedCombo).click();
               }
               retrievesFieldsFromObject(currentSelectedComboValue);
           });

           $('.idFieldClass').live('change', function(e){
                hasUnsavedChanges      = true;
                var selectedIdField    = $(this);
                var newIdFieldlabel    =
                    $.encoder.encodeForHTML(selectedIdField.find('option:selected').html());
                var newIdFieldId       = selectedIdField.attr('name');
                if(newIdFieldlabel != UNDEFINED_LABEL){
                    var isAbleToSetIdField = fMPage.isAbleToSetIdField(newIdFieldId);
                    if(isAbleToSetIdField){
                        fMPage.setLabelIdField(newIdFieldId, newIdFieldlabel);
                    }
                    else{
                        alert('{!JSENCODE($Label.SURVEY_MAPPING_ID_FIELD_CANNOT_BE_SET)}');
                        fMPage.removeIdField(newIdFieldId);
                    }
                }
                else{
                    fMPage.setLabelIdField(newIdFieldId, newIdFieldlabel);
                }
           });

           /*
           *  Success method when user selects an object from a header select.
           */
           function completeQuestionsCombo(fieldList){
               mapSMFields[currentSelectedCombo] = fieldList;
               hasUnsavedChanges = true;
               var selectedOption = $('.idFieldClass[name="' + currentSelectedCombo + '"]');
               mapObjectIdToRequiredFields[currentSelectedCombo] = [];
               globalSelectedOptions.map[currentSelectedCombo] = {};
               selectedOption.parent().attr('name', 'changed');
               selectedOption.parent().removeAttr('value');
               selectedOption.empty();
               selectedOption.append(new Option(UNDEFINED_LABEL,UNDEFINED_LABEL));
               fMPage.completeComboQMFromObject(fieldList, currentSelectedComboValue, currentSelectedCombo, false, UNDEFINED_LABEL);
               fMPage.enableQuestionMappings(currentSelectedCombo);
               fMPage.removeMasterDetailsRelationsAsFields(currentSelectedCombo);
               fMPage.modifySMRelatedData(currentSelectedCombo, currentSelectedComboValue, currentSelectedComboLabel);
               fMPage.addSMRefreshRelations(currentSelectedComboValue, fieldList);
               fMPage.removeUsedFieldsOfSurveyMapping(currentSelectedCombo);
               fMPage.refreshNodesParents();
               fMPage.masterObjectCollection.setFilteredFields(currentSelectedCombo, fieldList);
           }

           /**
           *    Method in charge to collect data from models, and send it to the server.
           *    @param Boolean that decides if shouldRemoveColumnsd continue to survey preview page or not.
           */
           function save(continueToNext){
               continueToPreview = continueToNext;
               var repeatedQM = $('.repeatedCombo').length;
               if(repeatedQM == 0){
                   blockPage();
                   // Variable that holds Id of survey mapping that will be used as intervieew.
                   var surveyToUseAsIntervieew = $('.intervieweeCheckbox:checked').parent().parent().find('.selectHeader').attr('name');
                   // Data to be sent to the server.
                   var jsonData           = {};
                   jsonData.surveyMapping = [];
                   var objectRelations    = fMPage.obtainObjectRelations(); // Get data of the object relations.

                   $('.selectHeader').each(function(index) {
                       // Iterate over each survey mapping data, and collects it.
                       var surveyMapping             = [];
                       var dummyContainer            = $(this).parent();
                       var isChanged                 = dummyContainer.attr('name') == 'changed';
                       var matchingFieldValue        = dummyContainer.find('.idFieldClass option:selected').attr('value');
                       var repeatIdSection           = dummyContainer.attr('value');
                       var isReferenceObject         = dummyContainer.find('.referenceObjectCheckbox').attr(CHECKED_ATTR) == CHECKED_ATTR;
                       surveyMapping.smClassSelected = $(this).attr('name');
                       surveyMapping.isIntervieww    = (surveyToUseAsIntervieew == surveyMapping.smClassSelected);
                       surveyMapping.smObjectMapped  = $(this).find('option:selected').attr('value');
                       surveyMapping.surveyId        = '{!JSENCODE(survey.id)}';
                       surveyMapping.matchingField   = matchingFieldValue;
                       surveyMapping.oldMapping      = isChanged;
                       surveyMapping.repeatIdSection = repeatIdSection;
                       surveyMapping.referenceObject = isReferenceObject;
                       surveyMapping.objectRelation  = _.find(objectRelations, function(or){ return or.parent == surveyMapping.smClassSelected; });
                       jsonData.surveyMapping.push(surveyMapping);
                   });
                   var jsonToSendSF = fMPage.getPageData(jsonData.surveyMapping);   // Get data of question mappings and survey mapping data.
                   var listRequired = fMPage.validateAllRequiredFieldisBeingUsed(); // Get data of required fields that are not present.

                   if(listRequired.length == 0) {
                        var autoNumberNotIdFields = fMPage.retrieveAutoNumberNotIdFields();   // Know if there is some Autonumber that is not in the Id fields.
                        if (autoNumberNotIdFields.length == 0) {
                            // No autonumber (that is no id field) is found.
                            sendJsonToSave(JSON.stringify(jsonToSendSF));
                            hasUnsavedChanges = false;
                        }
                        else{
                            // At least one autonumber not set as id field was found.
                            unblockPage();
                            alert(createErrorMessageForAutonumberNotSet(autoNumberNotIdFields));
                        }
                   }
                   else{
                       // At least one required field is not present in question mapping, so we display an error.
                       serverErrors = true;
                       var textError = '';
                       for(var i in listRequired){
                           var objectSelected =
                               $.encoder.encodeForHTML(
                                   $('.selectHeader[name="' + listRequired[i][0] + '"]').find('option:selected').html()
                               );
                           textError += '{!JSENCODE($Label.SURVEY_MAPPING_OBJECT_REQ_DATA)}'.format([ objectSelected, listRequired[i][2]]) + '\n';
                       }
                       var textErrorAlert = '{!JSENCODE($Label.SURVEY_MAPPING_ERROR_REQUIRED_NOT_PRESENT)}'.format([ textError ]);
                       popupSave = false;
                       unblockPage();
                       alert(textErrorAlert);
                   }

               }
               else{
                   // There are repeated fields, so we display an error.
                   serverErrors = true;
                   popupSave = false;
                   alert('{!JSENCODE($Label.SURVEYMAPPING_ERR_PAGEERRORS)}')
               }
           }

           /**
            *  Method in charge of return a message of the fields that are autonumber but are not set as Id field.
            *
            *  @param Array of autonumber fields that are not id field, with the format: <Field name, survey Id, object name>
            *  @return Message with the autonumbers that are not id fields.
            */
           function createErrorMessageForAutonumberNotSet(autoNumberNotIdFields){
                var errorMessage = '';
                _.each(autoNumberNotIdFields, function(autoNumber){
                    errorMessage += autoNumber.fieldName + ' (' + autoNumber.objectName + ')\n\r';
                });
                return '{!JSENCODE($Label.SURVEY_MAPPING_CANT_USE_AUTONUMBER_IF_NOT_IDFIELD)}'.format([errorMessage]);
           }

           /*
           *    Loads the current data for survey, and questions mappings.
           */
           function loadExistentSurveyMappings(surveyMappedData, shouldRemoveColumns){
               if(surveyMappedData){
                  if(shouldRemoveColumns){
                      fMPage.removeAllChildren();
                  }
                  _.each(surveyMappedData, function(sm){
                      addColumn(sm.surveyMap);
                      var columnAdded = $('.selectHeader').last();
                      $(columnAdded).find('option[value="' + sm.surveyMap.objectMapped + '"]').attr('selected', 'selected'); // Setting correct object to select combo.
                      fMPage.completeComboQMFromObject(sm.relatedFields, sm.surveyMap.objectMapped, sm.surveyMap.Id, sm.surveyMap, sm.listQuestionMapping, sm.surveyMap.matchingField);
                      fMPage.constructIdFieldCombo(sm.surveyMap.Id, columnAdded.parent().find('.idFieldClass'));
                 });
               }
               fMPage.adaptSectionLength();
               fMPage.disableQMOfRepeatedAtStart();
           }

           function populateNewMappings(surveyMappedData){
               // If save and continue
               if(continueToPreview){
                   window.location='/apex/SurveyBuilderPreview?id={!JSENCODE(survey.id)}';
               // If change tab without save changes
               }else if(popupSave){
                   doRedirect();
               // Save
               }else{
                   $('.selectObjectContainer').remove();
                   $('.childSelect').parent().remove();
                   $('.masterObjectRow').remove();
                   fMPage.restartSurveyMappingIds();
                   loadExistentSurveyMappings(surveyMappedData, true);
                   loadMasterObjects(surveyMappedData, true);
               }
               unblockPage();
           }

           //create a format function for strings
           String.prototype.format = function(args) {
               return this.replace(/{(\d+)}/g, function(match, number) {
                   return typeof args[number] != 'undefined'
                                                   ? args[number]
                                                   : match;
                   });
           };

           /**
           *    Method that collects survey mapping data, and convert it to a list of survey mappings.
           */
           function retrieveSurveyMappings(){
                var listSurveyMappings = [];
                $('.selectHeader:visible').each(function(index) {
                    var optionSelected      = $(this).find('option:selected');
                    var labelIdField        =
                        $.encoder.encodeForHTML(
                            $($(this).siblings()[0]).find('option:selected').html()
                        );
                    var repeatId            = $(this).parent().attr('value');
                    var dummySurveyMapping  = new SurveyMapping();
                    var isReference         = $(this).parent().find('.referenceObjectCheckbox').attr(CHECKED_ATTR) == CHECKED_ATTR;
                    dummySurveyMapping.set(ID_ATTR, $(this).attr('name'));
                    dummySurveyMapping.set(REPEAT_ID_ATTR, repeatId);
                    dummySurveyMapping.set(IS_REFERENCE_ATTR, isReference);
                    if(optionSelected.attr('value') != UNDEFINED_VALUE){
                        dummySurveyMapping.set(OBJECT_NAME_ATTR, optionSelected.attr('value'));
                        dummySurveyMapping.set(
                            OBJECT_LABEL_ATTR,
                            $.encoder.encodeForHTML(optionSelected.html())
                        );
                        dummySurveyMapping.set(ID_FIELD_LABEL, labelIdField);
                    }
                    listSurveyMappings.push(dummySurveyMapping);
                });
                return listSurveyMappings;
           }

           function toggleReadOnly(){
                $('.prevComboContainer').hide();
                $('select.selectHeader').attr('disabled', 'true');
                $('select.idFieldClass').attr('disabled', 'true');
                $('select.childSelect').attr('disabled', 'true');
                $('a.removeColumnAnchor, a.setRelationAnchorChange, a.setRelationAnchor').hide();
                $('input.intervieweeCheckbox, input.referenceObjectCheckbox').attr('disabled', 'true');
           }

            /**
            *   This method is in charge of load master objects, and populates them.
            *   @param surveyData Data of the surveys (in order to know fields of the object).
            *   @param removeMasterObjects Boolean that indicates if should remove previous list of master objects.
            */
            function loadMasterObjects(surveyData, removeMasterObjects){
                var listOfSurveyMappings = retrieveSurveyMappings();                        // Retrieves List of survey mappings.
                if(removeMasterObjects) fMPage.removeMasterObject();
                var elementToInsertAfter = obtainLastMasterObjectPosition();
                fMPage.setDefaultMasterObjects(elementToInsertAfter, listOfSurveyMappings); // Creates master objects.
                fMPage.setSMObjectRelations(surveyMapped);                                  // Set names, and data of the page.
                fMPage.setPreviousRelations(listOfSurveyMappings, savedObjectRelations);    // Set relations already saved to the master objects.
                fMPage.setFilteredFieldsFromDB(surveyData);
                fMPage.setVisibilityOfReferenceObjects();                                   // Set data for reference objects.
            }

            /**
            *   Method to know if an element is not undefined
            *   @param elem Element to check.
            *   @return True if element is not undefined, false otherwise.
            */
            function isNotUndefined(elem){
                return typeof elem != 'undefined';
            }

            /**
            * Toggle the source of the html image from Down arrow to Right and viceversa.
            * @param img html object image
            */
            function changeSlideIcon(img) {
               if (img.attr('src').indexOf("Down") != -1) {
                   img.attr('src','/img/arrowRight.gif')
               }
               else {
                   img.attr('src','/img/arrowDown.gif')
               }
            }

           $(document).ready(function(){
                questionsObject = $.parseJSON($('.existing-questions').text());

                if(questionsObject.length == 0) $('.prevComboContainer').hide(); // If there is no questions, remove "Add" button.

                renderQuestionsAndSurveyMappings();
                loadExistentSurveyMappings(surveyMapped, false);
                loadMasterObjects(surveyMapped, false);
                var isReadOnly = {!readOnly};
                if(isReadOnly){
                    toggleReadOnly();
                }



                //bind click actions to help arrows to collapse and hide the different help sections.
                $(".helpTextSectionTitlePlus").click(function(){
                    $(this).nextAll('.helpTextSection:first').slideToggle();
                    changeSlideIcon($(this).find('img'))
                });

                //also bind collapse and hide action to help section title
                $(".helpTextSectionTitle").click(function(){
                    $(this).nextAll('.helpTextSection:first').slideToggle();
                    changeSlideIcon($(this).prev().find('img'))
                });

           });

    </script>

    <!-- Use template -->
    <apex:composition template="SurveyBuilderTemplate">
        <!-- Set variables to be used later -->
        <apex:define name="init">
            <apex:variable var="selectedTab" value="FIELDMAPPING"/>
            <apex:variable var="hasError" value="serverErrors"/>
            <apex:variable var="isPublished" value="{!isPublished}"/>
            <apex:variable var="survey" value="{!survey}"/>
            <apex:variable var="readOnly" value="{!readOnly}"/>
            <apex:variable var="sameOrg" value="{!sameOrg}"/>
        </apex:define>

        <!-- Define the body -->
        <apex:define name="body">
            <apex:outputText id="existing-questions" styleClass="existing-questions hidden" value="{!questionJson}"/>
            <apex:pageBlock title="{!$Label.SURVEY_MAPPING_TITLE}" rendered="true">

            <div id="helpSection" class="helpSection">
                <a class="helpTextSectionTitlePlus">  <img src="/img/arrowDown.gif"/> </a>
                <h3 class="helpTextSectionTitle">{!$Label.SURVEY_MAPPING_HELP_TEXT_TITLE_1}</h3>
                <div class="helpTextSection">
                    {!$Label.SURVEY_MAPPING_HELP_TEXT_1}
                </div>
                <br/>
                <a class="helpTextSectionTitlePlus">  <img src="/img/arrowRight.gif"/> </a>
                <h3 class="helpTextSectionTitle">{!$Label.SURVEY_MAPPING_HELP_TEXT_TITLE_2}</h3>
                <div class="helpTextSection" style="display:none">
                    <ol>
                      <li>{!$Label.SURVEY_MAPPING_HELP_TEXT_2}
                      </li>
                      <li>{!$Label.SURVEY_MAPPING_HELP_TEXT_3}
                      </li>
                      <li>{!$Label.SURVEY_MAPPING_HELP_TEXT_4}
                            <ul>
                                <li>{!$Label.SURVEY_MAPPING_HELP_TEXT_5}
                                </li>
                            </ul>
                      </li>
                      <li>{!$Label.SURVEY_MAPPING_HELP_TEXT_6}
                      </li>
                      <li>{!$Label.SURVEY_MAPPING_HELP_TEXT_7}
                      </li>
                    </ol>
                </div>
                <br/>
                <a class="helpTextSectionTitlePlus">  <img src="/img/arrowRight.gif"/> </a>
                <h3 class="helpTextSectionTitle">{!$Label.SURVEY_MAPPING_HELP_TEXT_TITLE_3}</h3>
                <div class="helpTextSection" style="display:none">
                    <ul>
                        <li>{!$Label.SURVEY_MAPPING_HELP_TEXT_8}</li>
                        <li>{!$Label.SURVEY_MAPPING_HELP_TEXT_9}
                        </li>
                        <li>{!$Label.SURVEY_MAPPING_HELP_TEXT_10}</li>
                        <li>{!$Label.SURVEY_MAPPING_HELP_TEXT_11}</li>
                    </ul>
                </div>
                <br/>
                <span>{!$Label.SURVEY_MAPPING_HELP_TEXT_12} <a href="https://sites.google.com/a/grameenfoundation.org/ibt-customer-portal/home/faqs/field-mapping-tutorial">{!$Label.SURVEY_MAPPING_HELP_TEXT_HERE}</a>.</span>
            </div>

            <br/>
            <br/>
            <br/>
            </apex:pageBlock>

            <div id="questionArea">
                <apex:pageBlock id="mainPageBlock" title="{!$Label.SURVEY_MAPPING_SELECT_OBJECTS_AND_FIELDS}" >

                    <table id="tableMappings" style="border-spacing:0px 2px;border-collapse: collapse;" >
                        <tbody class="table2">
                            <tr class="headerColumns" id="HeadColumns">
                                <td width="1px"/>
                                <td width="100%"/>
                                <td >
                                    <div class="comboTitle" >{!$Label.SURVEY_MAPPING_OBJECT} </div>
                                    <div class="comboTitle">{!$Label.SURVEY_MAPPING_MATCHING_FIELD} </div>
                                </td>
                                <td style="width:20px" class="prevComboContainer">
                                    <input type="button" value="{!$Label.ADD}" onclick="blockPage();canAddColumn(false);unblockPage();" />
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <table>
                       <tbody class="tableRelateObjects"/>
                    </table>
                </apex:pageBlock>
            </div>
            <apex:form >
                <!-- Action functions -->
                <apex:actionFunction name="retrievesFieldsFromObject" action="{!getDataFromObject}" onComplete="completeQuestionsCombo({!selectedObjectFieldsJson});unblockPage()" >
                    <apex:param id="nameObject" name="nameObject" value="" />
                </apex:actionFunction>

                <apex:actionFunction name="sendJsonToSave" action="{!saveData}" onComplete="populateNewMappings({!mappedSurveys})" rerender="variableObjectRelationContainer, errorMessages" >
                    <apex:param id="jsonData" name="jsonData" value="" />
                </apex:actionFunction>

                <apex:outputPanel id="variableObjectRelationContainer" >
                    <script>
                        var savedObjectRelations = {!retrievedObjectRelations};
                        var surveyMapped = {!mappedSurveys};  // Collection of survey mappings, and question mappings.
                    </script>
                </apex:outputPanel>
            </apex:form>
        </apex:define>
    </apex:composition>
</apex:page>
