/**
 * Test code for the application update process
 *
 * (c) Copyright 2013 Grameen Foundation USA. All rights reserved
 *
 *
 * @author - Owen Davies (odavies@grameenfoundation.org)
 */
 @isTest
public class ApplicationUpdateTest {

    private static final String USERNAME = 'username';
    private static final String PASSWORD = 'password';

    /**
     * Create a Mobile User for the tests
     */
    static void setUpMobileUser() {

        Contact contact = TestUtils.createContact();
        Mobile_User__c user = TestUtils.createMobileUser(contact, USERNAME, PASSWORD, MobileUserDO.STATUS_ACTIVE);
    }

    /**
     * Log the Mobile User into the system
     *
     * @return - The LoginResult generated by the login
     */
    static MobileUserLoginLogic.LoginResult logMobileUserIn() {
        MobileUserLoginLogic.setBlockMobileUserLogin(false);
        return MobileUserLoginLogic.authenticateMobileUser(USERNAME, PASSWORD, '', false);
    }

    /**
     * Set up the request for the test
     *
     * @param versionNumber - The application version number that is on the Mobile Users device
     * @param sessionId     - The session id for the mobile user generated from the login
     */
    static void setUpRequest(String versionNumber, String sessionId) {

        Map<String, String> headersMap = new Map<String, String>{
            C.APPLICATION_VERSION_NUMBER_HEADER => versionNumber,
            C.SESSION_TOKEN_HEADER => sessionId
        };
        TestUtils.prepareRestContext(
            TestUtils.getServiceURL('applicationUpdate/'),
            null,
            headersMap
        );
    }

    /**
     * Tests upgrading to an application version that is newer than the one the mobile user has on device
     */
    static testMethod void testUpdateToNewerApplication() {

        // Create a new application version
        ApplicationVersionSettings__c newVersion =
            ApplicationVersionSettingsSelectorTest.insertTestData();

        // Set up the Mobile User and log them in
        setUpMobileUser();
        String sessionId = logMobileUserIn().mobileUser.Session_Token__c;

        // Set up the request
        setUpRequest('110', sessionId);

        Test.startTest();
        ApplicationUpdate.doPost();

        // Assert success
        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check the result
        ApplicationUpdateLogic.ApplicationVersionResult result =
            (ApplicationUpdateLogic.ApplicationVersionResult)JSON.deserialize(
                RestContext.response.responseBody.toString(),
                ApplicationUpdateLogic.ApplicationVersionResult.class
        );
        System.assertEquals(newVersion.DownloadUrl__c, result.getDownloadUrl());
        System.assert(result.getApplicationAvailable());
        Test.stopTest();
    }

    /**
     * Tests upgrading to an application version that is old than the one the mobile user has on device
     */
    static testMethod void testUpdateToOlderApplication() {

        // Create a new application version
        ApplicationVersionSettings__c newVersion =
            ApplicationVersionSettingsSelectorTest.insertTestData();

        // Set up the Mobile User and log them in
        setUpMobileUser();
        String sessionId = logMobileUserIn().mobileUser.Session_Token__c;

        // Set up the request
        setUpRequest('210', sessionId);
        Test.startTest();
        ApplicationUpdate.doPost();

        // Assert success
        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check the result
        ApplicationUpdateLogic.ApplicationVersionResult result =
            (ApplicationUpdateLogic.ApplicationVersionResult)JSON.deserialize(
                RestContext.response.responseBody.toString(),
                ApplicationUpdateLogic.ApplicationVersionResult.class
        );
        System.assertEquals(newVersion.DownloadUrl__c, result.getDownloadUrl());
        System.assert(result.getApplicationAvailable());
        Test.stopTest();
    }

    /**
     * Test no update available as the most recent application version matches the one on the Mobile
     * Users device
     */
    static testMethod void testNoUpdate() {

        // Create a new application version
        ApplicationVersionSettings__c newVersion =
            ApplicationVersionSettingsSelectorTest.insertTestData();

        // Set up the Mobile User and log them in
        setUpMobileUser();
        String sessionId = logMobileUserIn().mobileUser.Session_Token__c;

        // Set up the request
        setUpRequest('123', sessionId);

        Test.startTest();
        ApplicationUpdate.doPost();

        // Assert success
        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check the result
        ApplicationUpdateLogic.ApplicationVersionResult result =
            (ApplicationUpdateLogic.ApplicationVersionResult)JSON.deserialize(
                RestContext.response.responseBody.toString(),
                ApplicationUpdateLogic.ApplicationVersionResult.class
        );
        System.assertEquals('', result.getDownloadUrl());
        System.assert(!result.getApplicationAvailable());
        Test.stopTest();
    }

    /**
     * Test getting update to an older apllication version because current application version
     * has been deactivate
     */
    static testMethod void testUpdateDueToInactiveApplication() {

        // Create a new application version
        ApplicationVersionSettings__c newVersion =
            ApplicationVersionSettingsSelectorTest.insertTestData();

        ApplicationVersionSettings__c inactiveVersion =
            ApplicationVersionSettingsSelectorTest.createRecord(DateTime.now().addDays(-1),
                '210', 'inactiveUrl', false, '1.8'
            );
        insert inactiveVersion;

        // Set up the Mobile User and log them in
        setUpMobileUser();
        String sessionId = logMobileUserIn().mobileUser.Session_Token__c;

        // Set up the request
        setUpRequest('210', sessionId);
        Test.startTest();
        ApplicationUpdate.doPost();

        // Assert success
        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check the result
        ApplicationUpdateLogic.ApplicationVersionResult result =
            (ApplicationUpdateLogic.ApplicationVersionResult)JSON.deserialize(
                RestContext.response.responseBody.toString(),
                ApplicationUpdateLogic.ApplicationVersionResult.class
            );
        System.assertEquals(newVersion.DownloadUrl__c, result.getDownloadUrl());
        System.assert(result.getApplicationAvailable());
        Test.stopTest();
    }

    /**
     * Test getting an update to a newer application when there is an application version
     * with a published date in the future
     */
    static testMethod void testUpdateToNewerApplicationWithReleaseDateInFuture() {

        // Create a new application version
        ApplicationVersionSettings__c newVersion =
            ApplicationVersionSettingsSelectorTest.insertTestData();

        ApplicationVersionSettings__c futureVersion =
            ApplicationVersionSettingsSelectorTest.createRecord(DateTime.now().addDays(3),
                '210', 'futureUrl', true, '1.8'
            );
        insert futureVersion;

        // Set up the Mobile User and log them in
        setUpMobileUser();
        String sessionId = logMobileUserIn().mobileUser.Session_Token__c;

        // Set up the request
        setUpRequest('110', sessionId);
        Test.startTest();
        ApplicationUpdate.doPost();

        // Assert success
        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check the result
        ApplicationUpdateLogic.ApplicationVersionResult result =
            (ApplicationUpdateLogic.ApplicationVersionResult)JSON.deserialize(
                RestContext.response.responseBody.toString(),
                ApplicationUpdateLogic.ApplicationVersionResult.class
        );
        System.assertEquals(newVersion.DownloadUrl__c, result.getDownloadUrl());
        System.assert(result.getApplicationAvailable());
        Test.stopTest();
    }

    /**
     * Test for failure response due to invalid session token
     */
    static testMethod void testInvalidSessionToken() {

        // Create a new application version
        ApplicationVersionSettings__c newVersion =
            ApplicationVersionSettingsSelectorTest.insertTestData();

        // Set up the Mobile User and log them in
        setUpMobileUser();

        // Set up the request
        setUpRequest('210', 'badString');
        Test.startTest();
        ApplicationUpdate.doPost();

        // Assert login failed
        System.assertEquals(C.HTTP_UNAUTHORIZED, RestContext.response.statusCode);
        Test.stopTest();
    }

    /**
     * Test when there are no applicationVersion__c objects in the system
     */
     static testMethod void testNoApplicationVersionsAvailable() {

        // Set up the Mobile User and log them in
        setUpMobileUser();
        String sessionId = logMobileUserIn().mobileUser.Session_Token__c;

        // Set up the request
        setUpRequest('110', sessionId);

        ApplicationUpdate.doPost();

        // Assert success
        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check the result
        ApplicationUpdateLogic.ApplicationVersionResult result =
            (ApplicationUpdateLogic.ApplicationVersionResult)JSON.deserialize(
                RestContext.response.responseBody.toString(),
                ApplicationUpdateLogic.ApplicationVersionResult.class
        );
        System.assertEquals('', result.getDownloadUrl());
        System.assert(!result.getApplicationAvailable());
    }

    /**
     * Test method to check CRUD-FLS permission check while processing Application Update request
     */
    static testMethod void testDoPostPermissionDenied() {

        setUpMobileUser();
        String sessionId = logMobileUserIn().mobileUser.Session_Token__c;
        setUpRequest('2.1.0', sessionId);

        User user = TestUtils.createChatterExternalUser();
        MobileUserLoginLogic.setBlockMobileUserLogin(true);
        System.RunAs(user) {
            DescribeHandler.resetDescribeHandler();
            Test.startTest();
            ApplicationUpdate.doPost();
            Test.stopTest();
        }

        ErrorHandlingRest.ErrorMessages errors = (ErrorHandlingRest.ErrorMessages)
            JSON.deserialize(
                RestContext.response.responseBody.toString(),
                ErrorHandlingRest.ErrorMessages.class
            );
        System.assertEquals(1, errors.getErrors().size());
        System.assertEquals(C.HTTP_INTERNAL_SERVER_ERROR, RestContext.response.statusCode);
        List<ErrorHandlingRest.ErrorMessage> errorMessages = errors.getErrors();
        System.assert(
            RestContext.response.responseBody.toString().contains(System.Label.ERR_PERMISSIONS)
        );
        System.assertEquals(
            ErrorHandlingRest.ERR_CODE_CRUD_FLS, errorMessages[0].getErrorCode()
        );
        System.assertEquals(
            ErrorHandlingRest.CRUD_FLS, errorMessages[0].getErrorTranslationCode()
        );
    }
}