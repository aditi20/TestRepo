/**
 * Grameen: Field Force - Submit Jobs
 * This is the test class for FFSubmitJobs class
 * (c) Copyright 2013 Grameen Foundation USA. All rights reserved
 *
 * @author  Ernesto Quesada
 */
@isTest
public class FFSubmitJobsTest {

    // Static variables that are needed to store the helper objects
    static Survey__c survey;
    static Contact interviewee;
    static List<Submission__c> submissions;
    static JobTemplate__c jobTemplate;
    static List<TaskTemplate__c> taskTemplates;

    /**
     * Prepare the required records
     *
     * @param useBadJob - Indicates if the JobTemplate__c set up should have a bad hierarchy
     */
    static void setUpRecords(Boolean useBadJob) {

        // Prepare the objects needed
        survey = new Survey__c(Name = 'surveyTest1');
        insert survey;

        interviewee = new Contact(LastName= 'Seaman');
        insert interviewee;

        Submission__c sub1 = new Submission__c(Survey__c = survey.Id);
        Submission__c sub2 = new Submission__c(Survey__c = survey.Id);
        submissions = new List<Submission__c>();
        submissions.addAll(new List<Submission__c>{ sub1, sub2 });
        insert submissions;

        if (useBadJob) {
            JobTemplateDO.setSkipUpdateValidation(true);
            jobTemplate = createJobTemplateWithBadHierarchy();
        }
        else {
            jobTemplate = new JobTemplate__c(Name = 'aJobTemplate');
            insert jobTemplate;
        }

        TaskTemplate__c taskTemplate1 = new TaskTemplate__c(Name='aTaskTemplate', JobTemplate__c = jobTemplate.Id, Position__c = 1);
        TaskTemplate__c taskTemplate2 = new TaskTemplate__c(Name='aTaskTemplate2', JobTemplate__c = jobTemplate.Id, Position__c = 2);
        taskTemplates = new List<TaskTemplate__c>();
        taskTemplates.addAll(new List<TaskTemplate__c>{ taskTemplate1, taskTemplate2 });
        insert taskTemplates;
    }

    /**
     * Method that set everything to send a Job submission request
     *
     * @param reqBody - String the body of the request
     *
     * @return - The surveyor who will be submitting the request
     */
    static TestUtils.Surveyor setUpRequest(String reqBody) {

        // Create the mobile user and log them into TaroWorks
        TestUtils.Surveyor surveyor = TestUtils.createPartnerSurveyor('lastNameFFSJT', true);
        surveyor = TestUtils.partnerLoginDetails(surveyor);

        // Prepare the headers
        Map<String, String> headersMap = new Map<String, String>{
            C.SESSION_TOKEN_HEADER => surveyor.loginResult.getSessionToken(),
            C.CONTENT_TYPE_HEADER => C.CONTENT_TYPE_JSON_UTF
        };

        // Prepare the request
        TestUtils.prepareRestContext(
            TestUtils.getServiceURL('submission/'),
            Blob.valueOf(reqBody),
            headersMap
        );
        return surveyor;
    }

    /**
     * Method to setup data for jobs and Job submission request
     */
    private static List<FFSubmitJobsLogic.Job> createJobsTestData() {
        setUpRecords(false);

        // Create start and end dateTimes
        DateTime startTime = DateTime.now();
        DateTime endTime = startTime.addMinutes(20);
        Date startDate = Date.today();

        // Create some job and task activities
        List<FFSubmitJobsLogic.Job> jobActivities = new List<FFSubmitJobsLogic.Job> {
            createGoodJob(startDate, startTime, endTime)
        };
        return jobActivities;
    } 

    /**
     * Create a FFSubmitJobsLogic.Job. This object can be serialized to produce the JSON
     * formated in the same way as the device will submit to the REST resource.
     * Will initialize with an empty task list
     *
     * @param jobActivityId    - The id for the job that is generated by the device
     * @param jobTemplateId    - The JobTemplate__c.Id for the job
     * @param contactId        - The Contact.Id for the person that the job was performed on
     * @param creationDate     - The date the job was carried out
     * @param startDate        - The datetime that the task was started
     * @param endDate          - The datetime that the task ended
     * @param startGeolocation - String decimal format of the gps stamp that the task was started.
     *                             Format: Latitude Longitude Altitude Accuracy
     * @param endGeolocation   - String decimal format of the gps stamp that the task was finished.
     *                             Format: Latitude Longitude Altitude Accuracy
     */
    public static FFSubmitJobsLogic.Job createJobActivity(
            String jobActivityId,
            Id jobTemplateId,
            Id contactId,
            Date creationDate,
            DateTime startDate,
            DateTime endDate,
            String startLocation,
            String endLocation
    ) {
        return new FFSubmitJobsLogic.Job(
            jobActivityId,
            jobTemplateId,
            contactId,
            creationDate,
            SurveyUtils.convertDateTimeToString(startDate),
            SurveyUtils.convertDateTimeToString(endDate),
            startLocation,
            endLocation
        );
    }

    /**
     * Create a FFSubmitJobsLogic.Task and add it to a FFSubmitJobsLogic.Job
     *
     * @param job              - The FFSubmitJobsLogic.Job to add the task to
     * @param submissionID     - Optional submissionId for the submission related to the task.
     *                             Pass null to not link a submission
     * @param taskTemplate     - The TaskTemplate__c.Id for the task being carried out
     * @param startDate        - The datetime that the task was started
     * @param endDate          - The datetime that the task ended
     * @param startGeolocation - String decimal format of the gps stamp that the task was started.
     *                             Format: Latitude Longitude Altitude Accuracy
     * @param endGeolocation   - String decimal format of the gps stamp that the task was finished.
     *                             Format: Latitude Longitude Altitude Accuracy
     */
    public static void createTaskAndAddToJob(
            FFSubmitJobsLogic.Job job,
            Id submissionID,
            Id taskTemplate,
            DateTime startDate,
            DateTime endDate,
            String startGeolocation,
            String endGeolocation
    ) {
        job.tasks.add(createTask(
            submissionID,
            taskTemplate,
            startDate,
            endDate,
            startGeolocation,
            endGeolocation
        ));
    }

    /**
     * Create a FFSubmitJobsLogic.Task.
     *
     * @param submissionID     - Optional submissionId for the submission related to the task.
     *                             Pass null to not link a submission
     * @param taskTemplate     - The TaskTemplate__c.Id for the task being carried out
     * @param startDate        - The datetime that the task was started
     * @param endDate          - The datetime that the task ended
     * @param startGeolocation - String decimal format of the gps stamp that the task was started.
     *                             Format: Latitude Longitude Altitude Accuracy
     * @param endGeolocation   - String decimal format of the gps stamp that the task was finished.
     *                             Format: Latitude Longitude Altitude Accuracy
     *
     * @return - The newly created task object
     */
    static FFSubmitJobsLogic.Task createTask(
            Id submissionID,
            Id taskTemplate,
            DateTime startDate,
            DateTime endDate,
            String startGeolocation,
            String endGeolocation
    ) {
        return new FFSubmitJobsLogic.Task(
            submissionID,
            taskTemplate,
            SurveyUtils.convertDateTimeToString(startDate),
            SurveyUtils.convertDateTimeToString(endDate),
            startGeolocation,
            endGeolocation
        );
    }

    /**
     * Create a job with two activities that will succeed
     *
     * @param startDate - The date the job was done
     * @param startTime - The dateTime that the job started
     * @param endTime   - The dateTime that the job ended
     */
    private static FFSubmitJobsLogic.Job createGoodJob(Date startDate, DateTime startTime, DateTime endTime) {

        FFSubmitJobsLogic.Job jobActivity = createJobActivity(
            'activity1',
            jobTemplate.Id,
            interviewee.Id,
            startDate,
            startTime,
            endTime,
            '-122.0 80.0 0 1000',
            '-120.0 90.0 0 1000'
        );
        createTaskAndAddToJob(
            jobActivity,
            submissions[0].Id,
            taskTemplates[0].Id,
            startTime,
            endTime,
            '-122.0 80.0 0 1000',
            '-120.0 90.0 0 1000'
        );
        createTaskAndAddToJob(
            jobActivity,
            submissions[1].Id,
            taskTemplates[1].Id,
            startTime.addMinutes(5),
            endTime.addMinutes(5),
            '-122.0 80.0 0 1000',
            '-120.0 90.0 0 1000'
        );
        return jobActivity;
    }

    /**
     * Create a JobTemplates that has an object hierarchy that is invalid and will break
     * when a Job is submited to it
     */
    static JobTemplate__c createJobTemplateWithBadHierarchy() {

        List<JobTemplateDo.ObjectHierarchy> jobTempHier = new List<JobTemplateDo.ObjectHierarchy>();
        JobTemplateDO.ObjectHierarchy oh = new JobTemplateDO.ObjectHierarchy(
            '1hje',
            'Label For Object',
            'BadObjectName'
        );
        oh.addListField('Name');
        oh.addDetailField('Name');
        String hierarchy = JSON.serialize(oh);
        jobTempHier.add(oh);
        JobTemplate__c badJobTemplate = JobTemplateDO.createJobTemplate(
            'BadJobName', JobTemplateDO.STATUS_DRAFT, JSON.serialize(jobTempHier), 'instructions'
        );
        insert badJobTemplate;
        return badJobTemplate;
    }

    /**
     * Test converting a DateTime into the String format for the JSON
     */
    static testMethod void testDateTimeFormatting() {

        User standardUser = TestUtils.getStandardUser();
        DateTime now = DateTime.now();
        System.assertEquals(
            now,
            SurveyUtils.valueInGmt(SurveyUtils.convertDateTimeToString(now))
        );
    }

    /**
     *  Test the job Submission service. In this test all of the jobs should submit correctly
     */
    static testMethod void testJobSubmitSuccessful() {

        setUpRecords(false);

        // Create start and end dateTimes
        DateTime startTime = DateTime.now();
        DateTime endTime = startTime.addMinutes(20);
        Date startDate = Date.today();

        // Create some job and task activities
        List<FFSubmitJobsLogic.Job> jobActivities = new List<FFSubmitJobsLogic.Job>{
            createGoodJob(startDate, startTime, endTime)
        };
        TestUtils.Surveyor surveyor = setUpRequest(JSON.serialize(jobActivities));
        String checkDate;

        System.RunAs(surveyor.partnerUser) {
            Test.startTest();
            FFSubmitJobs.processJobSubmission();
            Test.stopTest();

            // Need to do this date calculation here as the rest of the test could be being run
            // by a user with a different timezone
            checkDate = SurveyUtils.valueInGmt(
                SurveyUtils.convertDateTimeToString(startTime)
            ).format('yyyy-MM-dd hh:mm a');
        }

        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check that the response is of the correct format
        FFSubmitJobsLogic.JobResponses responses = (FFSubmitJobsLogic.JobResponses)JSON.deserialize(
            RestContext.response.responseBody.toString(),
            FFSubmitJobsLogic.JobResponses.class
        );

        System.assertEquals(1, responses.jobs.size());
        System.assert(responses.jobs[0].success);
        System.assertEquals(jobActivities[0].jobActivityId, responses.jobs[0].jobActivityId);

        // Assert correct creation of the jobs and tasks
        List<Job__c> jobs = [
            SELECT
                Assigned__c,
                Contact__c,
                CreationDate__c,
                CreationSource__c,
                StartLocation__Latitude__s,
                StartLocation__Longitude__s,
                EndLocation__Latitude__s,
                EndLocation__Longitude__s,
                EndDate__c,
                StartDate__c,
                JobTemplate__c,
                Name,
                (
                    SELECT
                        Id,
                        EndDate__c,
                        StartLocation__Latitude__s,
                        StartLocation__Longitude__s,
                        EndLocation__Latitude__s,
                        EndLocation__Longitude__s,
                        StartDate__c,
                        Submission__c,
                        TaskTemplate__c
                    FROM
                        Tasks__r
                    ORDER BY
                        StartDate__c
                )
            FROM
                Job__c
            WHERE
                JobTemplate__c = :jobTemplate.Id
        ];

        // Verify that the job was created
        System.assertEquals(1, jobs.size());

        // Check correct Name generation
        System.assertEquals(surveyor.theContact.LastName + ' ' + jobTemplate.Name + ' ' + checkDate, jobs[0].Name);

        // Check every field is correct
        System.assertEquals(surveyor.theContact.Id, jobs[0].Assigned__c);
        System.assertEquals(interviewee.Id, jobs[0].Contact__c);
        System.assertEquals(jobTemplate.Id, jobs[0].JobTemplate__c);
        System.assertEquals(startDate, jobs[0].CreationDate__c);
        System.assertEquals(C.JOB_CREATION_SOURCE_ADHOC, jobs[0].CreationSource__c);
        System.assertEquals(startTime, jobs[0].StartDate__c);
        System.assertEquals(endTime, jobs[0].EndDate__c);
        System.assertEquals(-122, jobs[0].StartLocation__Longitude__s);
        System.assertEquals(80, jobs[0].StartLocation__Latitude__s);
        System.assertEquals(-120, jobs[0].EndLocation__Longitude__s);
        System.assertEquals(90, jobs[0].EndLocation__Latitude__s);

        // Check the task are correctly inserted
        System.assertEquals(2, jobs[0].Tasks__r.size());
        System.assertEquals(-122, jobs[0].Tasks__r[0].StartLocation__Longitude__s);
        System.assertEquals(80, jobs[0].Tasks__r[0].StartLocation__Latitude__s);
        System.assertEquals(-120, jobs[0].Tasks__r[0].EndLocation__Longitude__s);
        System.assertEquals(90, jobs[0].Tasks__r[0].EndLocation__Latitude__s);

        System.assertEquals(startTime, jobs[0].Tasks__r[0].StartDate__c);
        System.assertEquals(endTime, jobs[0].Tasks__r[0].EndDate__c);
        System.assertEquals(taskTemplates[0].Id, jobs[0].Tasks__r[0].TaskTemplate__c);
        System.assertEquals(submissions[0].Id, jobs[0].Tasks__r[0].Submission__c);
        System.assertEquals(-122, jobs[0].Tasks__r[1].StartLocation__Longitude__s);
        System.assertEquals(80, jobs[0].Tasks__r[1].StartLocation__Latitude__s);
        System.assertEquals(-120, jobs[0].Tasks__r[1].EndLocation__Longitude__s);
        System.assertEquals(90, jobs[0].Tasks__r[1].EndLocation__Latitude__s);
    }

    /**
     * Test submit when a task has a failing GPS.
     * One job should pass and be saved the other job should fail.
     */
    static testMethod void testTaskFailGps() {

        setUpRecords(false);

        // Create start and end dateTimes
        DateTime startTime = DateTime.now();
        DateTime endTime = startTime.addMinutes(20);
        Date startDate = Date.today();

        // Create a job activity that will pass
        List<FFSubmitJobsLogic.Job> jobActivities = new List<FFSubmitJobsLogic.Job>{
            createGoodJob(startDate, startTime, endTime)
        };

        // Create a job activity with a task activity that will fail
        FFSubmitJobsLogic.Job badJob = createJobActivity(
            'activity2',
            jobTemplate.Id,
            interviewee.Id,
            startDate,
            startTime,
            endTime,
            '50.0 80.0 0 1000',
            '50.0 90.0 0 1000'
        );
        createTaskAndAddToJob(
            badJob,
            submissions[0].Id,
            taskTemplates[0].Id,
            startTime,
            endTime,
            '50.0 80.0 0 1000 1 1 1 1 1 1',
            '50.0 90.0 0 1000'
        );
        createTaskAndAddToJob(
            badJob,
            submissions[1].Id,
            taskTemplates[1].Id,
            startTime,
            endTime,
            '50.0 80.0 0 1000',
            '50.0 90.0 0 1000'
        );
        jobActivities.add(badJob);

        TestUtils.Surveyor surveyor = setUpRequest(JSON.serialize(jobActivities));

        System.RunAs(surveyor.partnerUser) {
            Test.startTest();
            FFSubmitJobs.processJobSubmission();
            Test.stopTest();
        }

        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check that the response is of the correct format
        FFSubmitJobsLogic.JobResponses responses = (FFSubmitJobsLogic.JobResponses)JSON.deserialize(
            RestContext.response.responseBody.toString(),
            FFSubmitJobsLogic.JobResponses.class
        );
        System.assertEquals(2, responses.jobs.size());
        System.assert(responses.jobs[0].success);
        System.assertEquals(jobActivities[0].jobActivityId, responses.jobs[0].jobActivityId);

        System.assert(!responses.jobs[1].success);
        System.assertEquals(jobActivities[1].jobActivityId, responses.jobs[1].jobActivityId);
        System.assertEquals(1, responses.jobs[1].error.size());
        System.assertEquals(ErrorHandlingRest.ERR_CODE_SYNC_GPS_FAIL, responses.jobs[1].error[0].getErrorCode());
        System.assertEquals(ErrorHandlingRest.SYNC_JOB_GPS_FAIL, responses.jobs[1].error[0].getErrorTranslationCode());

        // Check that only one of the jobs was saved in the DB
        List<Job__c> jobs = [SELECT Id FROM Job__c WHERE JobTemplate__c = :jobTemplate.Id];
        System.assertEquals(1, jobs.size());
    }

    /**
     * Test submit when a job has a failing GPS.
     * One job should pass and be saved the other job should fail.
     */
    static testMethod void testFailGpsJob() {

        setUpRecords(false);

        // Create start and end dateTimes
        DateTime startTime = DateTime.now();
        DateTime endTime = startTime.addMinutes(20);
        Date startDate = Date.today();

        // Create a job activity that will pass
        List<FFSubmitJobsLogic.Job> jobActivities = new List<FFSubmitJobsLogic.Job>{
            createGoodJob(startDate, startTime, endTime)
        };

        // Create a job activity with a task activity that will fail
        FFSubmitJobsLogic.Job badJob = createJobActivity(
            'activity2',
            jobTemplate.Id,
            interviewee.Id,
            startDate,
            startTime,
            endTime,
            '50.0 80.0 0 1000 1 1 1 1 1 1',
            '50.0 90.0 0 1000'
        );
        createTaskAndAddToJob(
            badJob,
            submissions[0].Id,
            taskTemplates[0].Id,
            startTime,
            endTime,
            '50.0 80.0 0 1000',
            '50.0 90.0 0 1000'
        );
        createTaskAndAddToJob(
            badJob,
            submissions[1].Id,
            taskTemplates[1].Id,
            startTime,
            endTime,
            '50.0 80.0 0 1000',
            '50.0 90.0 0 1000'
        );
        jobActivities.add(badJob);

        TestUtils.Surveyor surveyor = setUpRequest(JSON.serialize(jobActivities));

        System.RunAs(surveyor.partnerUser) {
            Test.startTest();
            FFSubmitJobs.processJobSubmission();
            Test.stopTest();
        }

        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check that the response is of the correct format
        FFSubmitJobsLogic.JobResponses responses = (FFSubmitJobsLogic.JobResponses)JSON.deserialize(
            RestContext.response.responseBody.toString(),
            FFSubmitJobsLogic.JobResponses.class
        );
        System.assertEquals(2, responses.jobs.size());
        System.assert(responses.jobs[0].success);
        System.assertEquals(jobActivities[0].jobActivityId, responses.jobs[0].jobActivityId);

        System.assert(!responses.jobs[1].success);
        System.assertEquals(jobActivities[1].jobActivityId, responses.jobs[1].jobActivityId);
        System.assertEquals(1, responses.jobs[1].error.size());
        System.assertEquals(ErrorHandlingRest.ERR_CODE_SYNC_GPS_FAIL, responses.jobs[1].error[0].getErrorCode());
        System.assertEquals(ErrorHandlingRest.SYNC_JOB_GPS_FAIL, responses.jobs[1].error[0].getErrorTranslationCode());

        // Check that only one of the jobs was saved in the DB
        List<Job__c> jobs = [SELECT Id FROM Job__c WHERE JobTemplate__c = :jobTemplate.Id];
        System.assertEquals(1, jobs.size());
    }

    /**
     * Test submitting a job for a template that has a bad hierarchy
     */
    static testMethod void testCorruptJobTemplateHierarchy() {

        // Set up data with a JobTemplate with a bad hierarchy
        setUpRecords(true);

        // Create start and end dateTimes
        DateTime startTime = DateTime.now();
        DateTime endTime = startTime.addMinutes(20);
        Date startDate = Date.today();

        // Publish the job as only published jobs have the hierarchy checked
        jobTemplate.Status__c = JobTemplateDO.STATUS_PUBLISHED;
        update jobTemplate;

        // Create some job and task activities
        List<FFSubmitJobsLogic.Job> jobActivities = new List<FFSubmitJobsLogic.Job>{
            createGoodJob(startDate, startTime, endTime)
        };
        TestUtils.Surveyor surveyor = setUpRequest(JSON.serialize(jobActivities));

        System.RunAs(surveyor.partnerUser) {
            Test.startTest();
            FFSubmitJobs.processJobSubmission();
            Test.stopTest();
        }

        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check that the response is of the correct format
        FFSubmitJobsLogic.JobResponses responses = (FFSubmitJobsLogic.JobResponses)JSON.deserialize(
            RestContext.response.responseBody.toString(),
            FFSubmitJobsLogic.JobResponses.class
        );
        System.assertEquals(1, responses.jobs.size());
        System.assert(!responses.jobs[0].success);
        System.assertEquals(1, responses.jobs[0].error.size());
        System.assertEquals(ErrorHandlingRest.ERR_CODE_SYNC_SCHEMA_CORRUPT, responses.jobs[0].error[0].getErrorCode());
        System.assertEquals(ErrorHandlingRest.SYNC_JOB_DEF_CORRUPT, responses.jobs[0].error[0].getErrorTranslationCode());

        // Check that no jobs were created
        List<Job__c> jobs = [SELECT Id FROM Job__c WHERE JobTemplate__c = :jobTemplate.Id];
        System.assertEquals(0, jobs.size());
    }

    /**
     * Test with a JobTemplate__c that has been removed from the DB after the creation of the job
     */
    static testMethod void testDeletedJobTemplate() {

        List<FFSubmitJobsLogic.Job> jobActivities = createJobsTestData();
        TestUtils.Surveyor surveyor = setUpRequest(JSON.serialize(jobActivities));

        // Delete the JobTemplate
        JobTemplateDO.setSkipUpdateValidation(true);
        delete jobTemplate;

        System.RunAs(surveyor.partnerUser) {
            Test.startTest();
            FFSubmitJobs.processJobSubmission();
            Test.stopTest();
        }
        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check that the response is of the correct format
        FFSubmitJobsLogic.JobResponses responses = (FFSubmitJobsLogic.JobResponses)JSON.deserialize(
            RestContext.response.responseBody.toString(),
            FFSubmitJobsLogic.JobResponses.class
        );
        System.assertEquals(1, responses.jobs.size());
        System.assert(!responses.jobs[0].success);
        System.assertEquals(1, responses.jobs[0].error.size());
        System.assertEquals(ErrorHandlingRest.ERR_CODE_JOB_TEMPLATE_REMOVED, responses.jobs[0].error[0].getErrorCode());
        System.assertEquals(ErrorHandlingRest.SYNC_JOB_TEMPLATE_DELETED, responses.jobs[0].error[0].getErrorTranslationCode());

        // Check that no jobs were created
        List<Job__c> jobs = [SELECT Id FROM Job__c WHERE JobTemplate__c = :jobTemplate.Id];
        System.assertEquals(0, jobs.size());
    }

    /**
     * Test with a TaskTemplate__c that has been removed from the DB after the creation of the job
     */
    static testMethod void testDeletedTaskTemplate() {

        List<FFSubmitJobsLogic.Job> jobActivities = createJobsTestData();
        TestUtils.Surveyor surveyor = setUpRequest(JSON.serialize(jobActivities));

        // Delete a TaskTemplate
        delete taskTemplates[0];

        System.RunAs(surveyor.partnerUser) {
            Test.startTest();
            FFSubmitJobs.processJobSubmission();
            Test.stopTest();
        }
        System.assertEquals(C.HTTP_OK, RestContext.response.statusCode);

        // Check that the response is of the correct format
        FFSubmitJobsLogic.JobResponses responses = (FFSubmitJobsLogic.JobResponses)JSON.deserialize(
            RestContext.response.responseBody.toString(),
            FFSubmitJobsLogic.JobResponses.class
        );
        System.assertEquals(1, responses.jobs.size());
        System.assert(!responses.jobs[0].success);
        System.assertEquals(1, responses.jobs[0].error.size());
        System.assertEquals(ErrorHandlingRest.ERR_CODE_TASK_TEMPLATE_REMOVED, responses.jobs[0].error[0].getErrorCode());
        System.assertEquals(ErrorHandlingRest.SYNC_TASK_TEMPLATE_DELETED, responses.jobs[0].error[0].getErrorTranslationCode());

        // Check that no jobs were created
        List<Job__c> jobs = [SELECT Id FROM Job__c WHERE JobTemplate__c = :jobTemplate.Id];
        System.assertEquals(0, jobs.size());
    }

    /**
     * Test method to check CRUD-FLS permission check while processing Job submit request
     */
    static testMethod void testProcessJobSubmissioPermissionDenied() {

        List<FFSubmitJobsLogic.Job> jobActivities = createJobsTestData();

        TestUtils.Surveyor surveyor = setUpRequest(JSON.serialize(jobActivities));
        MobileUserLoginLogic.setBlockMobileUserLogin(false);

        System.RunAs(TestUtils.createChatterExternalUser()) {
            try {
                Test.startTest();
                FFSubmitJobs.processJobSubmission();
                Test.stopTest();
                System.assert(false);
            } catch (Exception e) {
                System.assert(true);
            }
        }

        ErrorHandlingRest.ErrorMessages errors = (ErrorHandlingRest.ErrorMessages)
            JSON.deserialize(
                RestContext.response.responseBody.toString(),
                ErrorHandlingRest.ErrorMessages.class
            );
        System.assertEquals(1, errors.getErrors().size());
        System.assertEquals(C.HTTP_INTERNAL_SERVER_ERROR, RestContext.response.statusCode);
        List<ErrorHandlingRest.ErrorMessage> errorMessages = errors.getErrors();
        System.assert(
            RestContext.response.responseBody.toString().contains(System.Label.ERR_PERMISSIONS)
        );
        System.assertEquals(
            ErrorHandlingRest.ERR_CODE_CRUD_FLS, errorMessages[0].getErrorCode()
        );
        System.assertEquals(
            ErrorHandlingRest.CRUD_FLS, errorMessages[0].getErrorTranslationCode()
        );
    }
}