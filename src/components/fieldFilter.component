<!--
 * Component to set filter for fields
 * USAGE: when changing the object in the select list
 * function renderFilter(string objectName) must be used
 * from outside the component to reload the filter.
 *
 * (c) Copyright 2014 Grameen Foundation USA. All rights reserved
 *
 * @author Ernesto Quesada
 -->
<apex:component controller="FieldFilterController">
    <style type="text/css">
        .filterDiv {
            display: inline-flex;
        }
    </style>
    <div id="selectorDiv" />
    <a href="javascript:void(0)" onclick="addFilter();">{!$Label.ADD_FILTER}</a>
    <br/>
    <script>
        
        var currentObject;
        var fieldList;
        
        /**
         * get the available fields for the object 
         */
        function getFieldsList(objectName) {
            blockPage();
            currentObject = objectName;
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.FieldFilterController.getStringFieldsSerialized}',
                currentObject,
                function(result, event) {
                    if (event.status) {
                        fieldList = $.parseJSON(result);
                        fieldList.sort(SortByName);
                        if ($.isEmptyObject(fieldList)) {
                            alert("{!JSENCODE($Label.FILTER_NO_FIELDS)}");
                        } else {
                            createFilterDiv(fieldList)
                        }
                        unblockPage();
                    }
                },
                {escape: false}
            );
        }
        
        // Sort Array
        function SortByName(a, b){
          var aName = a.label.toLowerCase();
          var bName = b.label.toLowerCase(); 
          return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
        }
        
        /**
         * create the div for a filter
         */
        function createFilterDiv(fieldList) {
            var filterDiv = $("<div />", {class : "filterDiv"});
            filterDiv.append(createFieldSelect(fieldList));
            filterDiv.append(createOperatorSelect());
            filterDiv.append(createValueInput());
            
            // if is the first filter don't add deletelink
            if ( $('.filterDiv').length != 0) {
                filterDiv.append(createDeleteLink());
            }
            $(selectorDiv).append(filterDiv);
        }
        
        /**
         * remove previous field select and set new one
         */
        function createFieldSelect(fieldList) {
            var selectDiv = $("<div />", {class : "divFieldSelect"});
            selectDiv.append($("<label />", {class : "labelField", text : "{!JSENCODE($Label.FILTER_FIELD)}"}));
            // create field list select
            var selectList = $("<select />", {
                class : "field_select",
                name : "selectName",
                change: function () {
                    var valueInput = $(this).parent().parent().find(".query_value");
                    var operatorSelect = $(this).parent().parent().find(".operator_select");
                    if ($(this).val() == ''){
                        valueInput.val('');
                        valueInput.prop('disabled', true);
                        operatorSelect.prop('disabled', true);
                    } else {
                        valueInput.prop('disabled', false);
                        operatorSelect.prop('disabled', false);
                    }
                    
                }
            });
            selectList.append($("<option>").attr('value', '').text('-'));
            for (var i = 0; i < fieldList.length; i++) {
                selectList.append($("<option>").attr(
                                'value', fieldList[i].name).text(fieldList[i].label));
            }
            selectDiv.append(selectList);
            return selectDiv;
        }
        
        /**
         * create select for the operator (for the moment only 'Equals')
         */
        function createOperatorSelect() {
            var selectDiv = $("<div />", {class : "divOperatorSelect"});
            var selectListOperator = $("<select />", {
                class : "operator_select",
                name : "selectName",
                disabled : true
            });
            selectDiv.append($("<label />", {class : "labelField", text : "{!JSENCODE($Label.FILTER_OPERATOR)}"}));
            selectListOperator.append($("<option>").attr('value', 'Equals').text('Equals'));
            selectDiv.append(selectListOperator);
            return selectDiv;
        }
        
        /**
         * create input for the value
         */
        function createValueInput() {
            var valueInputDiv = $("<div />", {class : "divOperatorInput"});
            valueInputDiv.append($("<label />", {class : "labelValue", text : "{!JSENCODE($Label.FILTER_VALUE)}"}));
            valueInputDiv.append($("<input />", {class : "query_value", disabled : true}));
            return valueInputDiv;
        }
        
        function createDeleteLink() {
            var deleteFilterLink = $("<a />", {
                text: "Delete",
                class : "deleteLink",
                href : "javascript:void(0)",
                click: function () {
                    $(this).parent().remove();
                }
            });
            return deleteFilterLink;
        }
         
        /**
         * Function to use outside the component
         */
        function renderFilter(objectName) {
            getFieldsList(objectName);
        }
          
        /**
         * get the filter objects stringify
         */
        function getFilterObjects() {
            var filtersToSend = new Array();
            $('.filterDiv').each(function () {
                filtersToSend.push(
                    {operator: $(this).find(".operator_select").val(),
                    field : $(this).find(".field_select").val(),
                    value: $(this).find(".query_value").val()}
                );
            });
            return JSON.stringify(filtersToSend);
        }
        
        /**
         *  add a new filter
         */
         function addFilter() {
            if (allFiltersSet()) {
                createFilterDiv(fieldList);
            }else {
                alert("{!JSENCODE($Label.FILTER_NOT_FILLED)}");
            }
         }
         
         /**
          * Check if all the filters are set
          */
         function allFiltersSet() {
            var filledFilter = true;
            $('.filterDiv').each(function() {
                if ($(this).find(".field_select").val() == '' ||
                    $(this).find(".query_value").val() == '' ||
                    $(this).find(".operator_select").val() == '') 
                {
                    filledFilter = false;
                }
            });
            return filledFilter;
         }
    </script>
</apex:component>
