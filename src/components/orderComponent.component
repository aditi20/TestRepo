<apex:component >
  <apex:includeScript value="{!$Resource.jquery}" />
  <apex:includeScript value="{!$Resource.underscore}" />
  
    <style type="text/css">
        .selectedLi{
            background: #ddd;
        }
        #listSection{
            border: solid 1px black;
            width: 90%;
            float:left;
            height: 100px;
            overflow: scroll;
        }
        #buttonSection{
            width: 6%;
            float:left;
            padding-left: 10px;
        }
        ul.sortableList li{
            margin-left: 3px !important;
            cursor: pointer;
        }
        ul.sortableList{
            list-style-type: none !important;
            padding: 0px 10px;
        }
        #moveUpButton{
            margin: 12px 0px 3px 33%;
            padding-left: 4px;
            cursor: pointer;
        }
        #moveDownButton{
            margin: 3px 0px 4px 33%;
            padding-left: 4px;
            cursor: pointer;
        }
        .buttonHelper{
            margin-left: 33%;
            padding-left: 5px;  
        }
    </style>
    
    <script id="orderList-template" type="text/template">
        <div id="orderComponent" >
            
            <div id="listSection" >
                <ul class="sortableList">
                  <% for(var i in listOfElements) { 
                        if(typeof listOfElements[i] == 'object') {%>
                            <li name="<%- listOfElements[i].name %>" ><%- listOfElements[i].label %></li>
                    <%  }
                    } %>
                </ul>
            </div>
                
            <div id="buttonSection">
                <div id="moveUpButton"><img class="upArrowIcon" src="/s.gif"></img></div>
                <div id="moveDownButton"><img class="downArrowIcon" src="/s.gif"></img></div>
            </div>
        </div>
    </script>

    <script>
    
        var orderComponent = function(containerDiv, listOfObjects){

            // Private attributes.
            var listElements     = listOfObjects;  // List of objects.
            var containerElement = containerDiv;   // Container div. 
            
            /*
             *  Method to call when invoking the sort component.
             */
            this.loadSortableObject = function(){
                var myTemplate  = _.template($('#orderList-template').html());
                containerElement.html(myTemplate({
                    listOfElements : listElements
                }));
                bindEvents();
            }
            
            /**
             *  Method in charge to return the list with the new order.
             *  @return List of objects with the new order. 
             */
            this.obtainOrderedObjects = function(){
                var newOrderList = new Array();

                $( "#orderComponent ul.sortableList li" ).each(function() {
                    var objName     = $(this).attr('name');
                    var objLabel    = $(this).html();
                    // Adding new object with name and label to the list to return
                    newOrderList.push({name:objName, label:objLabel});
                });
                return newOrderList;
            }

            /**
             *  Private method that add event listeners to each possible action.
             */
            var bindEvents = function(){

                // Event handler when user clicks in a task.
                $('#orderComponent ul.sortableList li').click(function(){
                    if($('#orderComponent .selectedLi').length > 0) $('#orderComponent .selectedLi').removeClass('selectedLi');
                    $(this).addClass('selectedLi');
                });
                
                // Event handler when user clicks on button up.
                $('#orderComponent #moveUpButton').click(function(){
                    var current = $('#orderComponent .selectedLi');
                    current.prev().before(current);
                    // This avoid that the element "hide" if the list is too long and the positions (origin and destination) are far apart
                    $("#listSection").scrollTop($('#orderComponent li').index(current) * current.height());
                });
                
                // Event handler when user clicks on button down.
                $('#orderComponent #moveDownButton').click(function(){
                    var current = $('#orderComponent .selectedLi');
                    current.next().after(current);
                    // This avoid that the element "hide" if the list is too long and the positions (origin and destination) are far apart
                    $("#listSection").scrollTop($('#orderComponent li').index(current) * current.height());
                });
            }
        }

            /*
               How to use: 

            // Preconditions: Should have the component loaded in the page 

            // When we want to instantiate the component, we select the jquery object that will contain the list... 
            var containerDiv  = $('#container');

            // ... after that, we create the array with objects with the format {name: myName, label : myLabel}
            var listOfObj      = [];
            var listOfObj1     = {};
            listOfObj1.name    = 'a001';
            listOfObj1.label   ='First';
            var listOfObj2     = {};
            listOfObj2.name    = 'a002';
            listOfObj2.label   ='Second';
            var listOfObj3     = {};
            listOfObj3.name    = 'a003';
            listOfObj3.label   ='Third';

            listOfObj.push(listOfObj1);
            listOfObj.push(listOfObj2);
            listOfObj.push(listOfObj3);
            
            // ... then we create our component with the container jQuery object and the list of objects as parameters.
            var orderedComponent = new orderComponent(containerDiv, listOfObj);

            // ... and finally call loadSortableObject method.
            orderedComponent.loadSortableObject();

            // If we need the list with the new order, we call:
            var newOrder = orderedComponent.obtainOrderedObjects();

            */
    </script>
</apex:component>