<!--
 * Component to set the default and individual target values for a performance target
 *
 * USAGE: Include the component with <c:performancetargetvaluescomponent />
 * and set the following attributes:
 *  - currentTarget:        The current performance target
 *  - hasIndividualTargets: Indicates if there are individual targets selected
 *  - individualTargets:    The list of individual targets
 *  - displayFieldList:     The list of fields based on selected object for
 *                          current Performance target 
 *
 * In addition the javascript function validateTargetInputs can be used to 
 * validate all the fields in the component at once.
 *
 * (c) Copyright 2013 Grameen Foundation USA. All rights reserved
 *
 * @author - Alejandro De Gregorio Tort - adegregorio@altimetrik.com
 * @author - Aditi Satpute
 -->
<apex:component >

    <apex:includeScript value="{!$Resource.jquery}" />
    <apex:includeScript value="{!URLFOR($Resource.js, 'utils.js')}"/>

    <apex:attribute type="PerformanceTarget__c" name="currentTarget" 
            description="The current performance target" />
    <apex:attribute type="Boolean" name="hasIndividualTargets" 
            description="Indicates if there are individual targets selected" />
    <apex:attribute type="AssignedTargetDO[]" name="individualTargets" 
            description="The list of individual targets" />
    <apex:attribute type="selectOption[]" name="displayFieldList"
            description="Display the list of fields based on selected object" />
    <apex:attribute type="Boolean" name="isTargetUpdated"
            description="Indicates if a target is being updated" />

    <style type="text/css">

        #componentTable {
            width: 80%;
            border: solid black 1px;
        }

        #default_target_row> td {
            vertical-align: middle ;
        }

        .target_input {
            width: 30px;
            text-align: center;
            border-left: 3px solid #c00;
        }

        .individual_target_table {
            width: 100%;
        }

        #individual_targets_row>td {
            text-align: right;
        }

        #individual_targets_row>td>div {
            width: 600px;
        }

        #individual_targets_table_div {
            max-height: 500px;
            overflow-y: scroll;
            border: solid black 1px;
        }

        #select_option_row> th {
            width: 150px;
        }

        #targetOptions {
            width: 100%
        }

        #componentBody {
            padding: 35px;
            display: none;
        }

        #displayForSum {
           display: none;
        }

        #display_row_for_SumPanel {
            display: none;
        }

        .even {
            background-color: #FFFFFF;
        }

        .disabled {
            color: grey !important;
        }

        .td_user_name {
            border-right: solid black 1px !important;
            text-align: left;
            vertical-align: middle !important;
            padding-left: 10px;
        }

        .td_target_value {
            text-align: center !important;
        }

        .target_value {
            width: 30px;
            text-align: center;
            border-left: 3px solid #c00;
        }

    </style>

    <div id="targetSelection">
        <table id= "targetOptions" class ="detailList">
            <tr id= "select_option_row">
                <th class="labelCol"><label >{!$Label.PERFORMANCE_TARGET_OPTION_SELECT}</label></th >
                <td>
                    <apex:selectRadio label=""
                        id="selectedRadio"
                        layout="pageDirection"
                        value="{!currentTarget.AggregationOperation__c}"
                        disabled="{!isTargetUpdated}"
                    >
                        <apex:selectOption id="count" itemValue="COUNT"
                                itemLabel="{!$Label.PERFORMANCE_TARGET_RECORD_COUNT}"/>
                        <apex:selectOption id="sumOption" itemValue="SUM"
                                itemLabel="{!$Label.PERFORMANCE_TARGET_SUM}"/>
                    </apex:selectRadio>
               </td>
           </tr>
       </table>
    </div>
    <div id="componentBody">
        <table id="componentTable" class="detailList">
            <tr id="display_row_for_SumPanel">
                <th class= "labelCol"><label>{!$Label.ACTUAL_TARGET_VALUE}</label></th>
                <td class= "data2Col">
                    <apex:selectList styleClass="objectSelect"
                        id="displaySelectFieldList"
                        value="{!currentTarget.TrackedFieldApiName__c}"
                        size="1"
                    >
                        <apex:selectOptions value="{!displayFieldList}"/>
                    </apex:selectList>
                </td>
            </tr>
            <tr id="default_target_row">
                <th class="labelCol"><label>{!$Label.DEFAULT_TARGET_VALUE}</label></th>
                <td class="data2Col">
                    <apex:inputText id="default_target_input" 
                        styleClass="target_input"
                        value="{!currentTarget.DefaultValue__c}" 
                        onblur="validateTargetInput(this); setCheckboxStatus();"
                        onfocus="allowOnlyPositiveNumbers(this)"
                        required="true"/>
                </td>
            </tr>
            <tr id="checkbox_row">
                <th class="labelCol"/>
                <td class="data2Col">
                    <apex:inputCheckbox value="{!hasIndividualTargets}" 
                            id="showIndividualTargets" onchange="toggleIndividualTargets()"/>
                    <label for="{!$Component.showIndividualTargets}">
                        {!$Label.SPECIFY_INDIVIDUAL_TARGETS}
                    </label>
                </td>
            </tr>
            <tr id="individual_targets_row">
                <th class="labelCol"/>
                <td class="data2Col">
                    <div>
                        <div id="individual_targets_table_div">
                            <apex:dataTable styleClass="individual_target_table" 
                                    id="individual_targets" value="{!individualTargets}" 
                                    rowClasses="odd,even" var="item">
                                <apex:column styleClass="td_user_name" id="td_user_name">
                                    <apex:outputText styleClass="user_name" id="user_name" 
                                            value="{!item.partnerUserName}"/>
                                </apex:column>
                                <apex:column styleClass="td_target_value" id="td_target_value">
                                    <apex:inputText styleClass="target_value" id="target_value" 
                                            onblur="validateTargetInput(this)"
                                            onfocus="allowOnlyPositiveNumbers(this)"
                                            value="{!item.targetValue}" required="true"/>
                                </apex:column>
                            </apex:dataTable>
                        </div>
                        <a href="javascript:resetTargetsToDefault()" class="link" >
                            {!$Label.RESET_TO_DEFAULT}
                        </a>
                    </div>
                </td>
            </tr>
        </table>
    </div>

    <script type="text/javascript">

        $(document).ready(function() {
            $("body").on("target-object-changed", function(options) {
                sortFields();
            });

            toggleIndividualTargets();
            setCheckboxStatus();

            // Convert value of default target to integer
            if($('input[id*="default_target_input"]').val() != ''){
                $('input[id*="default_target_input"]')
                    .val(parseInt($('input[id*="default_target_input"]').val(), 10)) ;
            }
            $("#targetSelection").click(function() {
                displayPanelWithSelectedOption()
            });
            displayPanelWithSelectedOption();
        });

        /**
         * Display Target panels based on selected option for Performance Target calculation
         */
        function displayPanelWithSelectedOption() {
            if ($('input[id*="selectedRadio:0"]').is(':checked')) {
                $("#display_row_for_SumPanel").hide();
                $("#componentBody").show();
                $('select[id*="displaySelectFieldList"]').val('');
            } else {
                $("#display_row_for_SumPanel").show();
                $("#componentBody").show();
            }
        }

        /**
         * Sort the Field list in alphabetical order
         */
        function sortFields() {
            function fieldSort(firstOccurance, secondOccurance) {
                if (firstOccurance.innerHTML == 'NA') {
                    return 1;
                } else if (secondOccurance.innerHTML == 'NA') {
                    return -1;
                }
                return (firstOccurance.innerHTML > secondOccurance.innerHTML) ? 1 : -1;
            };
            $('select[id*="displaySelectFieldList"]').each(function( index ) {
                $(this).find('option').sort(fieldSort).appendTo($(this));
            });
        }

        /**
         * Show or hide the individual targets table
         */
        function toggleIndividualTargets() {
            if ($('input[id*="showIndividualTargets"]').is(':checked')) {
                $('#individual_targets_row').show();
                if (!{!hasIndividualTargets}) {
                    resetTargetsToDefault();
                }
            } else {
                $('#individual_targets_row').hide();
                resetTargetsToDefault();
            }
        }

        /**
         * Set all targets as default.
         * Remove error class and error messages when default value is not empty
         */
        function resetTargetsToDefault() {
            if (!hasError($('input[id*="default_target_input"]'))) {
                // Remove all error messages
                removeErrors($('input[id*="target_value"]'));
                // Put default value in all target values
                $('input[id*="target_value"]').val($('input[id*="default_target_input"]').val());
            }
        }

        /**
         * Set checkbox to enabled or disabled depending on the default value
         */
        function setCheckboxStatus() {
            var hasMobileUsers = {!individualTargets.size != 0};
            var disabled = !hasMobileUsers
                           || $('input[id*="default_target_input"]').val() == '' 
                           || hasError($('input[id*="default_target_input"]'));
            $('input[id*="showIndividualTargets"]').prop(
                'disabled', disabled);
            $('#checkbox_row>td').toggleClass('disabled', disabled);

            if (!hasMobileUsers) {
                $('#checkbox_row>td').attr(
                    'title',
                    '{!JSENCODE($Label.PERFORMANCE_TARGET_NO_MOBILE_USERS)}'
                );
            }
        }

        /**
         * Set keyup event to only allow positive numbers
         *
         * @param input - The input to set the event
         */
        function allowOnlyPositiveNumbers(input) {
            $(input).keyup(function() {
                $(input).val($(input).val().replace(/[^0-9]/g, ''));
            });
        }

        /**
         * Function to validate all the target inputs in the component
         */
        function validateTargetInputs() {
            validateTargetInput($('input[id*="default_target_input"]'));
            if ($('input[id*="showIndividualTargets"]').is(':checked')) {
                $('input[id*="target_value"]').each(function() {
                    validateTargetInput($(this));
                });
            } else {
                resetTargetsToDefault();
            }
        }

        /**
         * Function to validate a required input
         *
         * @param input - The input to validate
         */
        function validateTargetInput(input) {
            removeErrors(input);
            if ($(input).val() == '') {
                addErrorTo(input, '{!JSENCODE($Label.PERFORMANCE_TARGET_ERROR_MESSAGE)}');
            } else if (/[^0-9]/g.test($(input).val())) {
                addErrorTo(input, '{!JSENCODE($Label.PERFORMANCE_TARGET_NON_NUMBER_ERROR)}');
            }
        }

    </script>

</apex:component>